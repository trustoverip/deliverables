{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ToIP Deliverables \u00b6 Under our Linux Foundation Joint Development Foundation (JDF) charter, each ToIP Foundation Working Group (WG) can produce a variety of deliverable types . This repo covers the lifecycle management process for the work products (\"deliverables\") of the ToIP Foundation. Purpose \u00b6 This repository serves several purposes: Document and maintain the process information for contributing to the ToIP Foundation. Storage and version control for a subset of the Foundation's deliverables. Publication process for our Deliverables Portal , an interactive GitHub Pages website. Manages a list of industry adoption activity . Portal Development \u00b6 This repo contains the content resources for the generation of documentation associated with the contribution process and state of our deliverables. It contains the tools necessary to generate this documentation in two rendering formats (printed, online). Please refer to our Portal Build Process for more details. Getting Started \u00b6 The ToIP Foundation maintains a variety of active and inactive activities that adhere to a specific process for the maturation and publication of deliverables that are relevant to: Work within the same working group Work within another working group Work within another community or SDO There are several ways in which you can get acquainted with our work. Learn \u00b6 If you are here to explore the work products of the ToIP Foundation, we recommend you refer to the Deliverables Results section of our Deliverables Portal as it provides a current listing of all work product efforts and their statuses. Contribute \u00b6 If you have an idea for a new instance of one of our types of deliverables, please consider making a contribution: Contribute a Specification Contribute a Other Work-Products Consume \u00b6 The goal of the ToIP Foundation is to help define a complete architecture for Internet-scale digital trust that combines both cryptographic trust at the machine layer and human trust at the business, legal, and social layers. Our work products with be positioned at various levels of such an architecture and will mature at disparate rates. Please familiar yourself with the lifecycle management process for our deliverables and then when/where appropriate we welcome your feedback on how you plan or have consumed our work. Please keep us informed of your activities by submitted a pull-request against our adoption matrix .","title":"Overview"},{"location":"#toip-deliverables","text":"Under our Linux Foundation Joint Development Foundation (JDF) charter, each ToIP Foundation Working Group (WG) can produce a variety of deliverable types . This repo covers the lifecycle management process for the work products (\"deliverables\") of the ToIP Foundation.","title":"ToIP Deliverables"},{"location":"#purpose","text":"This repository serves several purposes: Document and maintain the process information for contributing to the ToIP Foundation. Storage and version control for a subset of the Foundation's deliverables. Publication process for our Deliverables Portal , an interactive GitHub Pages website. Manages a list of industry adoption activity .","title":"Purpose"},{"location":"#portal-development","text":"This repo contains the content resources for the generation of documentation associated with the contribution process and state of our deliverables. It contains the tools necessary to generate this documentation in two rendering formats (printed, online). Please refer to our Portal Build Process for more details.","title":"Portal Development"},{"location":"#getting-started","text":"The ToIP Foundation maintains a variety of active and inactive activities that adhere to a specific process for the maturation and publication of deliverables that are relevant to: Work within the same working group Work within another working group Work within another community or SDO There are several ways in which you can get acquainted with our work.","title":"Getting Started"},{"location":"#learn","text":"If you are here to explore the work products of the ToIP Foundation, we recommend you refer to the Deliverables Results section of our Deliverables Portal as it provides a current listing of all work product efforts and their statuses.","title":"Learn"},{"location":"#contribute","text":"If you have an idea for a new instance of one of our types of deliverables, please consider making a contribution: Contribute a Specification Contribute a Other Work-Products","title":"Contribute"},{"location":"#consume","text":"The goal of the ToIP Foundation is to help define a complete architecture for Internet-scale digital trust that combines both cryptographic trust at the machine layer and human trust at the business, legal, and social layers. Our work products with be positioned at various levels of such an architecture and will mature at disparate rates. Please familiar yourself with the lifecycle management process for our deliverables and then when/where appropriate we welcome your feedback on how you plan or have consumed our work. Please keep us informed of your activities by submitted a pull-request against our adoption matrix .","title":"Consume"},{"location":"contact_us/","text":"Org-Name \u00b6 Contact 1 \u00b6 Email xxxxxxxxxxxxx Contact Authors \u00b6 Email xxxxxxxxxxx","title":"Contact us"},{"location":"contact_us/#org-name","text":"","title":"Org-Name"},{"location":"contact_us/#contact-1","text":"Email xxxxxxxxxxxxx","title":"Contact 1"},{"location":"contact_us/#contact-authors","text":"Email xxxxxxxxxxx","title":"Contact Authors"},{"location":"faq/","text":"Frequently asked question? \u00b6 Answer Frequently asked question? \u00b6 Answer","title":"FAQ"},{"location":"faq/#frequently-asked-question","text":"Answer","title":"Frequently asked question?"},{"location":"faq/#frequently-asked-question_1","text":"Answer","title":"Frequently asked question?"},{"location":"lists/adoption/","text":"ToIP Adoption Matrix \u00b6 As our work efforts mature and become consumed, we would love to track how and where our activities will/are influencing other open technology based endeavors. This document serves as a compendium of voluntary data points describing planned or active status examples of consumption. Organization Consumed Deliverable Purpose Status xxx xxx xxx Planned xxx xxx xxx Active","title":"Adoption"},{"location":"lists/adoption/#toip-adoption-matrix","text":"As our work efforts mature and become consumed, we would love to track how and where our activities will/are influencing other open technology based endeavors. This document serves as a compendium of voluntary data points describing planned or active status examples of consumption. Organization Consumed Deliverable Purpose Status xxx xxx xxx Planned xxx xxx xxx Active","title":"ToIP Adoption Matrix"},{"location":"process/basic_tools/","text":"Audience \u00b6 Any ToIP member that is interested in contributing should familiarize themselves with a basic set of tools and education material. Roles \u00b6 Contributors may fall into one of the following categories: Role Activities Content Author Use an editor of choice to write sections of the target deliverable using Markdown files as fragments of the ultimate deliverable document or specification. GitHub skilled developer Github savvy contributor that collects Markdown files from other contributors and manages commits and pull-requests as a representative of the team of contributors/ Both Provider of content and manager of Github interactions. Contribution Readiness \u00b6 Education \u00b6 The following list provides some examples for how to get quickly acquainted with the Markdown Language . Markdown Tutorial Markdown Documentation Getting Started with Markdown Markdwon Basics Mastering the Markdown Language Authoring Tools \u00b6 The following list provides a few examples for how to setup your local environment with one or more content authoring tools. Markdown Converters for Word Processors MS-Word to Markdown Word-to-Markdown Writage How to convert Word Docs to Markdown Google Docs to Markdown G-Suite Plugins How to convert Google Docs to Markdown Integrated development environment (IDE) Visual Studio Atom Development Environment Dependencies \u00b6 Required Software MacOS Installation Instructions Windows Installation Instructions Docker Docker Desktop Docker Desktop make Command Line Tools for Xcode Install Chocolatey Package Installer , then install make via choco git Git Installer Git Installer Content Authoring Environments \u00b6 The contributors associated with each ToIP Deliverable will decide which one of two of the ToIP themed content authoring environments will be used. You can learn more about contributing preparation steps for each of the options: Authoring Environment Usage View Demo(s) ToIP MkDocs Material Theme Contributors Guide General Documentation and Specification development ToIP MkDocs Theme for Documentation , ToIP MkDocs Theme for Specs Spec-Up for ToIP which is derived from Spec-Up Specification development ToIP Spec-up Repo , Baseline Spec-up Demo","title":"Basic Tools"},{"location":"process/basic_tools/#audience","text":"Any ToIP member that is interested in contributing should familiarize themselves with a basic set of tools and education material.","title":"Audience"},{"location":"process/basic_tools/#roles","text":"Contributors may fall into one of the following categories: Role Activities Content Author Use an editor of choice to write sections of the target deliverable using Markdown files as fragments of the ultimate deliverable document or specification. GitHub skilled developer Github savvy contributor that collects Markdown files from other contributors and manages commits and pull-requests as a representative of the team of contributors/ Both Provider of content and manager of Github interactions.","title":"Roles"},{"location":"process/basic_tools/#contribution-readiness","text":"","title":"Contribution Readiness"},{"location":"process/basic_tools/#education","text":"The following list provides some examples for how to get quickly acquainted with the Markdown Language . Markdown Tutorial Markdown Documentation Getting Started with Markdown Markdwon Basics Mastering the Markdown Language","title":"Education"},{"location":"process/basic_tools/#authoring-tools","text":"The following list provides a few examples for how to setup your local environment with one or more content authoring tools. Markdown Converters for Word Processors MS-Word to Markdown Word-to-Markdown Writage How to convert Word Docs to Markdown Google Docs to Markdown G-Suite Plugins How to convert Google Docs to Markdown Integrated development environment (IDE) Visual Studio Atom","title":"Authoring Tools"},{"location":"process/basic_tools/#development-environment-dependencies","text":"Required Software MacOS Installation Instructions Windows Installation Instructions Docker Docker Desktop Docker Desktop make Command Line Tools for Xcode Install Chocolatey Package Installer , then install make via choco git Git Installer Git Installer","title":"Development Environment Dependencies"},{"location":"process/basic_tools/#content-authoring-environments","text":"The contributors associated with each ToIP Deliverable will decide which one of two of the ToIP themed content authoring environments will be used. You can learn more about contributing preparation steps for each of the options: Authoring Environment Usage View Demo(s) ToIP MkDocs Material Theme Contributors Guide General Documentation and Specification development ToIP MkDocs Theme for Documentation , ToIP MkDocs Theme for Specs Spec-Up for ToIP which is derived from Spec-Up Specification development ToIP Spec-up Repo , Baseline Spec-up Demo","title":"Content Authoring Environments"},{"location":"process/code_of_conduct/","text":"The membership of the ToIP Foundation pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. The Steering Committee is committed to upholding the ToIP Code of Conduct and contributors agree to act according to a standard set of behaviors that contribute to a positive environment.","title":"Code of Conduct"},{"location":"process/content_templates/","text":"Content Consistency \u00b6 Since there will be a variety of instances for each type of ToIP Deliverable, contributors within the ToIP Foundation should be bale to benefit from the experience of prior work. A template is a document model that provides common reusable outline for all deliverable types to improves consumability, consistent and productivity. Each deliverable type has an associated template that can be copied to instantiate new instances of a deliverable type. The ToIP Foundation uses the Markdown language to create deliverable templates. These files are designed for writing documentation in plain text that can be easily converted to PDF, HTML and other formats. Templates use the \".md\" file extensions. Templates enable the ToIP community to quickly leverage lessons learned by others to get started on the publishing of a ToIP Deliverable. Figure 1 provides a simplified view of the more detailed UML Class Diagram that depicts the relationship of Templates to ToIP Deliverables. Templates are managed in the templates folder of the deliverables repo . Deliverable Type Usage \u00b6 While not intended as an exhaustive information source the following table helps to describe the relationships of how various deliverables may be used by other deliverables. The YELLOW shaded cells reflect work-products of the ToIP Foundation, whereas the GREEN shaded cells reflect work-products of external foundry projects that have leveraged guidance from the ToIP Foundation. For example, Ecosystem and Utility projects may leverage different guidance from different ToIP Work Groups. Each external project may create its own Governance Framework and a Project Playbook to implement the domain specific project. So effectively, ToIP Work Groups USE templates to PRODUCE deliverables such as Guides. While external projects CONSUME Guides to PRODUCE Governance Frameworks and Playbooks.","title":"Content Templates"},{"location":"process/content_templates/#content-consistency","text":"Since there will be a variety of instances for each type of ToIP Deliverable, contributors within the ToIP Foundation should be bale to benefit from the experience of prior work. A template is a document model that provides common reusable outline for all deliverable types to improves consumability, consistent and productivity. Each deliverable type has an associated template that can be copied to instantiate new instances of a deliverable type. The ToIP Foundation uses the Markdown language to create deliverable templates. These files are designed for writing documentation in plain text that can be easily converted to PDF, HTML and other formats. Templates use the \".md\" file extensions. Templates enable the ToIP community to quickly leverage lessons learned by others to get started on the publishing of a ToIP Deliverable. Figure 1 provides a simplified view of the more detailed UML Class Diagram that depicts the relationship of Templates to ToIP Deliverables. Templates are managed in the templates folder of the deliverables repo .","title":"Content Consistency"},{"location":"process/content_templates/#deliverable-type-usage","text":"While not intended as an exhaustive information source the following table helps to describe the relationships of how various deliverables may be used by other deliverables. The YELLOW shaded cells reflect work-products of the ToIP Foundation, whereas the GREEN shaded cells reflect work-products of external foundry projects that have leveraged guidance from the ToIP Foundation. For example, Ecosystem and Utility projects may leverage different guidance from different ToIP Work Groups. Each external project may create its own Governance Framework and a Project Playbook to implement the domain specific project. So effectively, ToIP Work Groups USE templates to PRODUCE deliverables such as Guides. While external projects CONSUME Guides to PRODUCE Governance Frameworks and Playbooks.","title":"Deliverable Type Usage"},{"location":"process/contributing_basic_doc/","text":"Purpose \u00b6 These contribution instructions SHOULD be used when the following are all true : The ToIP Deliverable is an instance of a Basic Publication Category Recommendation - Design Principle Recommendation - Best Practice The contributors have decided to collaborate using an assembly of multiple markdown files as their authoring approach. The contributors have decided that the subject deliverable will need to be published as a single Markdown file. The contributors have decided to leverage the ToIP themed MkDocs Authoring Environment. Target Repository \u00b6 All deliverables that fall under the Basic Publication Category and will be developed using n assembly of markdown files will require the creation of a dedicated workspace using a GitHub Repository (repo) . We use standard GitHub activities to track issues and feature requests, as well as accept all Pull Requests ( PR's ) related to the deliverable managed by this new dedicated repo. Contributors to the new the ToIP Foundation repo SHOULD use easy and transparent activities for: Reporting a bug Discussing the current state of the ToIP Deliverable Submitting a fix Proposing process recommendations other General GitHub Workflow \u00b6 Issue Submission / Tracking Pull requests Organization Resources Code of Conduct ToIP GitHub Organization Management Policy General GitHub Resources Issue Creation PR Creation Creating a PR from a Fork Preparation \u00b6 Before proposing a new deliverable, consider the following preparatory actions: Exploring the idea in the appropriate WG Slack Channel. Socialize the idea during a WG meeting. Make use of the mailing lists to socialize the idea and to make an assessment that your proposal is novel and you will not be overlapping work already proposed. Make use of the Deliverables Portal for a current listing of all work product efforts and their statuses so that you can appropriately position your proposal as unique. Make a decision as to the type of deliverable you will be proposing. Discuss the roles each contributor will perform. Some members may be knowledgable content contributors, some may be skilled in GitHub, other may have both skills. Establish a preliminary outline for the content you will be delivering and who may be contributing specific sections of work. Proposal Readiness \u00b6 Gather Details \u00b6 The contributors need to gather some specifics before getting started: Familiarize themselves with our deliverable naming conventions Select the appropriate <TypeIndicator> Obtain a unique <4digitID> : When you are ready to create your new deliverable repository you will need to obtain a unique deliverable identifier. To assign a number to your deliverable visit this web page . Settle on a clear and concise <DeliverableName> that is descriptive, yet not verbose or vague. Create Dedicated Repository \u00b6 The ToIP Foundation provides a GitHub Template Repository to allow contributors to quickly and easily configure a new dedicated deliverables repository. The ToIP MkDocs Material Theme Template Repository allows ToIP contributors to create new repositories with the directory structure, branches, and files necessary to bootstrap the development of a Basic Publication Category using a ToIP branded version of MkDocs . Visit ToIP MkDocs Material Theme Template Repository. Click on the Use this template button Fill out the repo creation form using the appropriate naming convention as depicted below: Make sure the trustoverip is the owner Organization Follow our deliverable naming conventions to enter a repository name such as BP0120-utility-creation-lessons Select Public as the commit permissions Click on the Create repository from template button and wait for GitHub to create and prime your new repo. Visit the new repo and invite your fellow contributors by accessing the repo's Manage Access Settings Coordination of roles \u00b6 The stakeholders of this new deliverable, typically members of a task force commissioned by a ToIP WG, will need to gather make few decisions: What is the initial outline of the deliverable? Suggestions are available in the templates folder of the deliverables repo . Who will act as content authors and/or GitHub committers? How will the contributors coordinate the assignment and delivery of Markdown files to the GitHub committers? How will the sections of the deliverable outline be assigned to content authors? Prepare Proposal \u00b6 One of the members of the contributing team needs to prepare and submit the initial proposal draft. This should include the following: Open an Issue against the new repo. Use a title such as \"Prime pump for new deliverable <4digitID>\" Fork and clone the new repository. In a terminal window, change directories to the parent folder of your newly cloned repo. Rename the current README file to DEV_README [~/new-repo] ==> cp README.md DEV_README.md Edit the README.md file and replace all existing content with the content from the appropriate template file from the deliverables repo /template folder. Using your browser, navigate to the deliverables repo Click on the /templates folder Find the applicable template file and click on the Raw button to open a browser window displaying the raw Markdown text. Using your browser, select all the text, copy it to your clipboard and paste it into the README.md replacing all existing text. At the top of your file modify the title so it is in the form: <TypeIndicator><4digitID>: Friendly Version of Your Title. Minimally complete the Title and Summary sections of the README.md . Consider how your new proposal should be tagged . The template file provides an outline to guide your work. Use the outline to bootstrap your work on the deliverable. Use MUST and SHOULD per standard conventions . Put care into the details! Deliverable submissions that do not present sufficient information as suggested by the template tend to be poorly received. Submit Proposal Draft \u00b6 Commit your changes and submit a PR using previously opened issue. Open an Issue against the Deliverables Repo . Use a title such as \"Add new proposal <4digitID>\" Fork and clone the Deliverables Repo . Commit an updated version of ../results/proposed.md and push your changes. Submit a pull request using the previously opened Issue. Make sure that all of your commits satisfy the DCO requirements of the repo and conform to the license restrictions noted below . The ToIP Deliverable Maintainers will check to see if the process has been followed, and request any process changes before merging the PR. When the PR is merged, your deliverable is now formally in the Proposed state. Repo generation configuration \u00b6 Delete the mkdocs.spec.yml file, which is located at the root of the project. Follow the instructions for generation of a single Markdown File using the Combine Tool . Repo organization suggestions \u00b6 You can add supporting artifacts and organize your repo filesystem structure as desired. You MAY want to: Create an images folder to store .jpg and .png files that your content may reference. Leverage PlantUML tools for the generation of UML diagrams. When doing so, you MUST include in your folder: Source: .puml files in a puml folder Output: .jpg or .png files Leverage presentation tools (i.e.: PowerPoint, Keynote). When doing so, you MUST include in your folder: Source: .ppt or .key files Output: .jpg or .png files /images /src /puml interaction_diagram.puml /presentations diagrams.key slides.ppt interaction_diagram.svg interaction_diagram.png interaction_diagram.jpg diagram_1.png slide_1.jpg Iterate on Proposal \u00b6 The contributors of this new repo can now focus on the authoring of content. Iterative updates to the repo reflecting work by contributors will depend on the decisions made by the contributors in the Authoring Coordination Approach . Submit Proposal for Approval \u00b6 Once the proposal is ready for review and approval by the sponsoring WG, the contributors should follow our Lifecycle Management Process .","title":"Single Document Generation"},{"location":"process/contributing_basic_doc/#purpose","text":"These contribution instructions SHOULD be used when the following are all true : The ToIP Deliverable is an instance of a Basic Publication Category Recommendation - Design Principle Recommendation - Best Practice The contributors have decided to collaborate using an assembly of multiple markdown files as their authoring approach. The contributors have decided that the subject deliverable will need to be published as a single Markdown file. The contributors have decided to leverage the ToIP themed MkDocs Authoring Environment.","title":"Purpose"},{"location":"process/contributing_basic_doc/#target-repository","text":"All deliverables that fall under the Basic Publication Category and will be developed using n assembly of markdown files will require the creation of a dedicated workspace using a GitHub Repository (repo) . We use standard GitHub activities to track issues and feature requests, as well as accept all Pull Requests ( PR's ) related to the deliverable managed by this new dedicated repo. Contributors to the new the ToIP Foundation repo SHOULD use easy and transparent activities for: Reporting a bug Discussing the current state of the ToIP Deliverable Submitting a fix Proposing process recommendations other","title":"Target Repository"},{"location":"process/contributing_basic_doc/#general-github-workflow","text":"Issue Submission / Tracking Pull requests Organization Resources Code of Conduct ToIP GitHub Organization Management Policy General GitHub Resources Issue Creation PR Creation Creating a PR from a Fork","title":"General GitHub Workflow"},{"location":"process/contributing_basic_doc/#preparation","text":"Before proposing a new deliverable, consider the following preparatory actions: Exploring the idea in the appropriate WG Slack Channel. Socialize the idea during a WG meeting. Make use of the mailing lists to socialize the idea and to make an assessment that your proposal is novel and you will not be overlapping work already proposed. Make use of the Deliverables Portal for a current listing of all work product efforts and their statuses so that you can appropriately position your proposal as unique. Make a decision as to the type of deliverable you will be proposing. Discuss the roles each contributor will perform. Some members may be knowledgable content contributors, some may be skilled in GitHub, other may have both skills. Establish a preliminary outline for the content you will be delivering and who may be contributing specific sections of work.","title":"Preparation"},{"location":"process/contributing_basic_doc/#proposal-readiness","text":"","title":"Proposal Readiness"},{"location":"process/contributing_basic_doc/#gather-details","text":"The contributors need to gather some specifics before getting started: Familiarize themselves with our deliverable naming conventions Select the appropriate <TypeIndicator> Obtain a unique <4digitID> : When you are ready to create your new deliverable repository you will need to obtain a unique deliverable identifier. To assign a number to your deliverable visit this web page . Settle on a clear and concise <DeliverableName> that is descriptive, yet not verbose or vague.","title":"Gather Details"},{"location":"process/contributing_basic_doc/#create-dedicated-repository","text":"The ToIP Foundation provides a GitHub Template Repository to allow contributors to quickly and easily configure a new dedicated deliverables repository. The ToIP MkDocs Material Theme Template Repository allows ToIP contributors to create new repositories with the directory structure, branches, and files necessary to bootstrap the development of a Basic Publication Category using a ToIP branded version of MkDocs . Visit ToIP MkDocs Material Theme Template Repository. Click on the Use this template button Fill out the repo creation form using the appropriate naming convention as depicted below: Make sure the trustoverip is the owner Organization Follow our deliverable naming conventions to enter a repository name such as BP0120-utility-creation-lessons Select Public as the commit permissions Click on the Create repository from template button and wait for GitHub to create and prime your new repo. Visit the new repo and invite your fellow contributors by accessing the repo's Manage Access Settings","title":"Create Dedicated Repository"},{"location":"process/contributing_basic_doc/#coordination-of-roles","text":"The stakeholders of this new deliverable, typically members of a task force commissioned by a ToIP WG, will need to gather make few decisions: What is the initial outline of the deliverable? Suggestions are available in the templates folder of the deliverables repo . Who will act as content authors and/or GitHub committers? How will the contributors coordinate the assignment and delivery of Markdown files to the GitHub committers? How will the sections of the deliverable outline be assigned to content authors?","title":"Coordination of roles"},{"location":"process/contributing_basic_doc/#prepare-proposal","text":"One of the members of the contributing team needs to prepare and submit the initial proposal draft. This should include the following: Open an Issue against the new repo. Use a title such as \"Prime pump for new deliverable <4digitID>\" Fork and clone the new repository. In a terminal window, change directories to the parent folder of your newly cloned repo. Rename the current README file to DEV_README [~/new-repo] ==> cp README.md DEV_README.md Edit the README.md file and replace all existing content with the content from the appropriate template file from the deliverables repo /template folder. Using your browser, navigate to the deliverables repo Click on the /templates folder Find the applicable template file and click on the Raw button to open a browser window displaying the raw Markdown text. Using your browser, select all the text, copy it to your clipboard and paste it into the README.md replacing all existing text. At the top of your file modify the title so it is in the form: <TypeIndicator><4digitID>: Friendly Version of Your Title. Minimally complete the Title and Summary sections of the README.md . Consider how your new proposal should be tagged . The template file provides an outline to guide your work. Use the outline to bootstrap your work on the deliverable. Use MUST and SHOULD per standard conventions . Put care into the details! Deliverable submissions that do not present sufficient information as suggested by the template tend to be poorly received.","title":"Prepare Proposal"},{"location":"process/contributing_basic_doc/#submit-proposal-draft","text":"Commit your changes and submit a PR using previously opened issue. Open an Issue against the Deliverables Repo . Use a title such as \"Add new proposal <4digitID>\" Fork and clone the Deliverables Repo . Commit an updated version of ../results/proposed.md and push your changes. Submit a pull request using the previously opened Issue. Make sure that all of your commits satisfy the DCO requirements of the repo and conform to the license restrictions noted below . The ToIP Deliverable Maintainers will check to see if the process has been followed, and request any process changes before merging the PR. When the PR is merged, your deliverable is now formally in the Proposed state.","title":"Submit Proposal Draft"},{"location":"process/contributing_basic_doc/#repo-generation-configuration","text":"Delete the mkdocs.spec.yml file, which is located at the root of the project. Follow the instructions for generation of a single Markdown File using the Combine Tool .","title":"Repo generation configuration"},{"location":"process/contributing_basic_doc/#repo-organization-suggestions","text":"You can add supporting artifacts and organize your repo filesystem structure as desired. You MAY want to: Create an images folder to store .jpg and .png files that your content may reference. Leverage PlantUML tools for the generation of UML diagrams. When doing so, you MUST include in your folder: Source: .puml files in a puml folder Output: .jpg or .png files Leverage presentation tools (i.e.: PowerPoint, Keynote). When doing so, you MUST include in your folder: Source: .ppt or .key files Output: .jpg or .png files /images /src /puml interaction_diagram.puml /presentations diagrams.key slides.ppt interaction_diagram.svg interaction_diagram.png interaction_diagram.jpg diagram_1.png slide_1.jpg","title":"Repo organization suggestions"},{"location":"process/contributing_basic_doc/#iterate-on-proposal","text":"The contributors of this new repo can now focus on the authoring of content. Iterative updates to the repo reflecting work by contributors will depend on the decisions made by the contributors in the Authoring Coordination Approach .","title":"Iterate on Proposal"},{"location":"process/contributing_basic_doc/#submit-proposal-for-approval","text":"Once the proposal is ready for review and approval by the sponsoring WG, the contributors should follow our Lifecycle Management Process .","title":"Submit Proposal for Approval"},{"location":"process/contributing_multi_docs/","text":"Purpose \u00b6 These contribution instructions SHOULD be used when the following are all true : The ToIP Deliverable is not an instance of a Specification. The contributors have decided to collaborate using an assembly of multiple markdown files as their authoring approach. The contributors have decided that the subject deliverable will need to be published in a variety of formats. The contributors have decided to leverage the ToIP themed MkDocs Authoring Environment. Target Repository \u00b6 All deliverables that fall under the Multi-Modal Publication Category will require the creation of a dedicated workspace using a GitHub Repository (repo) . We use standard GitHub activities to track issues and feature requests, as well as accept all Pull Requests ( PR's ) related to the deliverable managed by this new dedicated repo. Contributors to the new the ToIP Foundation repo SHOULD use easy and transparent activities for: Reporting a bug Discussing the current state of the ToIP Deliverable Submitting a fix Proposing process recommendations other General GitHub Workflow \u00b6 Issue Submission / Tracking Pull requests Organization Resources Code of Conduct ToIP GitHub Organization Management Policy General GitHub Resources Issue Creation PR Creation Creating a PR from a Fork Preparation \u00b6 Before proposing a new deliverable, consider the following preparatory actions: Exploring the idea in the appropriate WG Slack Channel. Socialize the idea during a WG meeting. Make use of the mailing lists to socialize the idea and to make an assessment that your proposal is novel and you will not be overlapping work already proposed. Make use of the Deliverables Portal for a current listing of all work product efforts and their statuses so that you can appropriately position your proposal as unique. Make a decision as to the type of deliverable you will be proposing. Discuss the roles each contributor will perform. Some members may be knowledgable content contributors, some may be skilled in GitHub, other may have both skills. Establish a preliminary outline for the content you will be delivering and who may be contributing specific sections of work. Proposal Readiness \u00b6 Gather Details \u00b6 The contributors need to gather some specifics before getting started: Familiarize themselves with our deliverable naming conventions Select the appropriate <TypeIndicator> Obtain a unique <4digitID> : When you are ready to create your new deliverable repository you will need to obtain a unique deliverable identifier. To assign a number to your deliverable visit this web page . Settle on a clear and concise <DeliverableName> that is descriptive, yet not verbose or vague. Create Dedicated Repository \u00b6 The ToIP Foundation provides a GitHub Template Repository to allow contributors to quickly and easily configure a new dedicated deliverables repository. The ToIP MkDocs Material Theme Template Repository allows ToIP contributors to create new repositories with the directory structure, branches, and files necessary to bootstrap the development of a Multi-Modal Publication using a ToIP branded version of MkDocs . Visit ToIP MkDocs Material Theme Template Repository. Click on the Use this template button Fill out the repo creation form using the appropriate naming convention as depicted below: Make sure the trustoverip is the owner Organization Follow our deliverable naming conventions to enter a repository name such as WP0120-utility-creation-lessons Select Public as the commit permissions Click on the Create repository from template button and wait for GitHub to create and prime your new repo. Visit the new repo and invite your fellow contributors by accessing the repo's Manage Access Settings Coordination of roles \u00b6 The stakeholders of this new deliverable, typically members of a task force commissioned by a ToIP WG, will need to gather make few decisions: What is the initial outline of the deliverable? Suggestions are available in the templates folder of the deliverables repo . Who will act as content authors and/or GitHub committers? How will the contributors coordinate the assignment and delivery of Markdown files to the GitHub committers? How will the sections of the deliverable outline be assigned to content authors? Prepare Proposal \u00b6 One of the members of the contributing team needs to prepare and submit the initial proposal draft. This should include the following: Open an Issue against the new repo. Use a title such as \"Prime pump for new deliverable <4digitID>\" Fork and clone the new repository. In a terminal window, change directories to the parent folder of your newly cloned repo. Rename the current README file to DEV_README [~/new-repo] ==> cp README.md DEV_README.md Edit the README.md file and replace all existing content with the content from the appropriate template file from the deliverables repo /template folder. Using your browser, navigate to the deliverables repo Click on the /templates folder Find the applicable template file and click on the Raw button to open a browser window displaying the raw Markdown text. Using your browser, select all the text, copy it to your clipboard and paste it into the README.md replacing all existing text. At the top of your file modify the title so it is in the form: <TypeIndicator><4digitID>: Friendly Version of Your Title. Minimally complete the Title and Summary sections of the README.md . Consider how your new proposal should be tagged . The template file provides an outline to guide your work. Use the outline to bootstrap your work on the deliverable. Use MUST and SHOULD per standard conventions . Put care into the details! Deliverable submissions that do not present sufficient information as suggested by the template tend to be poorly received. Submit Proposal Draft \u00b6 Commit your changes and submit a PR using previously opened issue. Open an Issue against the Deliverables Repo . Use a title such as \"Add new proposal <4digitID>\" Fork and clone the Deliverables Repo . Commit an updated version of ../results/proposed.md and push your changes. Submit a pull request using the previously opened Issue. Make sure that all of your commits satisfy the DCO requirements of the repo and conform to the license restrictions noted below . The ToIP Deliverable Maintainers will check to see if the process has been followed, and request any process changes before merging the PR. When the PR is merged, your deliverable is now formally in the Proposed state. Repo generation configuration \u00b6 Delete the mkdocs.spec.yml file, which is located at the root of the project. Follow the instructions for generation of a single Markdown File using the Combine Tool . Follow the instructions for the generation of a PDF. TODO Repo organization suggestions \u00b6 You can add supporting artifacts and organize your repo filesystem structure as desired. You MAY want to: Create an images folder to store .jpg and .png files that your content may reference. Leverage PlantUML tools for the generation of UML diagrams. When doing so, you MUST include in your folder: Source: .puml files in a puml folder Output: .jpg or .png files Leverage presentation tools (i.e.: PowerPoint, Keynote). When doing so, you MUST include in your folder: Source: .ppt or .key files Output: .jpg or .png files /images /src /puml interaction_diagram.puml /presentations diagrams.key slides.ppt interaction_diagram.svg interaction_diagram.png interaction_diagram.jpg diagram_1.png slide_1.jpg Iterate on Proposal \u00b6 The contributors of this new repo can now focus on the authoring of content. Iterative updates to the repo reflecting work by contributors will depend on the decisions made by the contributors in the Authoring Coordination Approach . Submit Proposal for Approval \u00b6 Once the proposal is ready for review and approval by the sponsoring WG, the contributors should follow our Lifecycle Management Process .","title":"Rich Content Generation"},{"location":"process/contributing_multi_docs/#purpose","text":"These contribution instructions SHOULD be used when the following are all true : The ToIP Deliverable is not an instance of a Specification. The contributors have decided to collaborate using an assembly of multiple markdown files as their authoring approach. The contributors have decided that the subject deliverable will need to be published in a variety of formats. The contributors have decided to leverage the ToIP themed MkDocs Authoring Environment.","title":"Purpose"},{"location":"process/contributing_multi_docs/#target-repository","text":"All deliverables that fall under the Multi-Modal Publication Category will require the creation of a dedicated workspace using a GitHub Repository (repo) . We use standard GitHub activities to track issues and feature requests, as well as accept all Pull Requests ( PR's ) related to the deliverable managed by this new dedicated repo. Contributors to the new the ToIP Foundation repo SHOULD use easy and transparent activities for: Reporting a bug Discussing the current state of the ToIP Deliverable Submitting a fix Proposing process recommendations other","title":"Target Repository"},{"location":"process/contributing_multi_docs/#general-github-workflow","text":"Issue Submission / Tracking Pull requests Organization Resources Code of Conduct ToIP GitHub Organization Management Policy General GitHub Resources Issue Creation PR Creation Creating a PR from a Fork","title":"General GitHub Workflow"},{"location":"process/contributing_multi_docs/#preparation","text":"Before proposing a new deliverable, consider the following preparatory actions: Exploring the idea in the appropriate WG Slack Channel. Socialize the idea during a WG meeting. Make use of the mailing lists to socialize the idea and to make an assessment that your proposal is novel and you will not be overlapping work already proposed. Make use of the Deliverables Portal for a current listing of all work product efforts and their statuses so that you can appropriately position your proposal as unique. Make a decision as to the type of deliverable you will be proposing. Discuss the roles each contributor will perform. Some members may be knowledgable content contributors, some may be skilled in GitHub, other may have both skills. Establish a preliminary outline for the content you will be delivering and who may be contributing specific sections of work.","title":"Preparation"},{"location":"process/contributing_multi_docs/#proposal-readiness","text":"","title":"Proposal Readiness"},{"location":"process/contributing_multi_docs/#gather-details","text":"The contributors need to gather some specifics before getting started: Familiarize themselves with our deliverable naming conventions Select the appropriate <TypeIndicator> Obtain a unique <4digitID> : When you are ready to create your new deliverable repository you will need to obtain a unique deliverable identifier. To assign a number to your deliverable visit this web page . Settle on a clear and concise <DeliverableName> that is descriptive, yet not verbose or vague.","title":"Gather Details"},{"location":"process/contributing_multi_docs/#create-dedicated-repository","text":"The ToIP Foundation provides a GitHub Template Repository to allow contributors to quickly and easily configure a new dedicated deliverables repository. The ToIP MkDocs Material Theme Template Repository allows ToIP contributors to create new repositories with the directory structure, branches, and files necessary to bootstrap the development of a Multi-Modal Publication using a ToIP branded version of MkDocs . Visit ToIP MkDocs Material Theme Template Repository. Click on the Use this template button Fill out the repo creation form using the appropriate naming convention as depicted below: Make sure the trustoverip is the owner Organization Follow our deliverable naming conventions to enter a repository name such as WP0120-utility-creation-lessons Select Public as the commit permissions Click on the Create repository from template button and wait for GitHub to create and prime your new repo. Visit the new repo and invite your fellow contributors by accessing the repo's Manage Access Settings","title":"Create Dedicated Repository"},{"location":"process/contributing_multi_docs/#coordination-of-roles","text":"The stakeholders of this new deliverable, typically members of a task force commissioned by a ToIP WG, will need to gather make few decisions: What is the initial outline of the deliverable? Suggestions are available in the templates folder of the deliverables repo . Who will act as content authors and/or GitHub committers? How will the contributors coordinate the assignment and delivery of Markdown files to the GitHub committers? How will the sections of the deliverable outline be assigned to content authors?","title":"Coordination of roles"},{"location":"process/contributing_multi_docs/#prepare-proposal","text":"One of the members of the contributing team needs to prepare and submit the initial proposal draft. This should include the following: Open an Issue against the new repo. Use a title such as \"Prime pump for new deliverable <4digitID>\" Fork and clone the new repository. In a terminal window, change directories to the parent folder of your newly cloned repo. Rename the current README file to DEV_README [~/new-repo] ==> cp README.md DEV_README.md Edit the README.md file and replace all existing content with the content from the appropriate template file from the deliverables repo /template folder. Using your browser, navigate to the deliverables repo Click on the /templates folder Find the applicable template file and click on the Raw button to open a browser window displaying the raw Markdown text. Using your browser, select all the text, copy it to your clipboard and paste it into the README.md replacing all existing text. At the top of your file modify the title so it is in the form: <TypeIndicator><4digitID>: Friendly Version of Your Title. Minimally complete the Title and Summary sections of the README.md . Consider how your new proposal should be tagged . The template file provides an outline to guide your work. Use the outline to bootstrap your work on the deliverable. Use MUST and SHOULD per standard conventions . Put care into the details! Deliverable submissions that do not present sufficient information as suggested by the template tend to be poorly received.","title":"Prepare Proposal"},{"location":"process/contributing_multi_docs/#submit-proposal-draft","text":"Commit your changes and submit a PR using previously opened issue. Open an Issue against the Deliverables Repo . Use a title such as \"Add new proposal <4digitID>\" Fork and clone the Deliverables Repo . Commit an updated version of ../results/proposed.md and push your changes. Submit a pull request using the previously opened Issue. Make sure that all of your commits satisfy the DCO requirements of the repo and conform to the license restrictions noted below . The ToIP Deliverable Maintainers will check to see if the process has been followed, and request any process changes before merging the PR. When the PR is merged, your deliverable is now formally in the Proposed state.","title":"Submit Proposal Draft"},{"location":"process/contributing_multi_docs/#repo-generation-configuration","text":"Delete the mkdocs.spec.yml file, which is located at the root of the project. Follow the instructions for generation of a single Markdown File using the Combine Tool . Follow the instructions for the generation of a PDF. TODO","title":"Repo generation configuration"},{"location":"process/contributing_multi_docs/#repo-organization-suggestions","text":"You can add supporting artifacts and organize your repo filesystem structure as desired. You MAY want to: Create an images folder to store .jpg and .png files that your content may reference. Leverage PlantUML tools for the generation of UML diagrams. When doing so, you MUST include in your folder: Source: .puml files in a puml folder Output: .jpg or .png files Leverage presentation tools (i.e.: PowerPoint, Keynote). When doing so, you MUST include in your folder: Source: .ppt or .key files Output: .jpg or .png files /images /src /puml interaction_diagram.puml /presentations diagrams.key slides.ppt interaction_diagram.svg interaction_diagram.png interaction_diagram.jpg diagram_1.png slide_1.jpg","title":"Repo organization suggestions"},{"location":"process/contributing_multi_docs/#iterate-on-proposal","text":"The contributors of this new repo can now focus on the authoring of content. Iterative updates to the repo reflecting work by contributors will depend on the decisions made by the contributors in the Authoring Coordination Approach .","title":"Iterate on Proposal"},{"location":"process/contributing_multi_docs/#submit-proposal-for-approval","text":"Once the proposal is ready for review and approval by the sponsoring WG, the contributors should follow our Lifecycle Management Process .","title":"Submit Proposal for Approval"},{"location":"process/contributing_multi_specs/","text":"Purpose \u00b6 These contribution instructions SHOULD be used when the following are all true : The ToIP Deliverable is an instance of a Specification. The contributors have decided to collaborate using an assembly of multiple markdown files as their authoring approach. The contributors have decided that the subject deliverable will need to be published in a variety of formats. The contributors have decided to leverage one of two of the ToIP themed Specification Authoring Environments: Authoring Environment Usage View Demo(s) ToIP MkDocs Material Theme General Documentation and Specification development ToIP MkDocs Theme for Documentation , ToIP MkDocs Theme for Specs Spec-Up for ToIP which is derived from Spec-Up Specification development ToIP Spec-up Repo , Baseline Spec-up Demo ToIP MkDocs Material Theme approach \u00b6 Follow the Rich Content Generation instructions with one exception: Under the Repo Generation Configuration Section , delete the mkdocs.yml file, and rename mkdocs.spec.yml to mkdocs.yml . Spec-Up for ToIP approach \u00b6 Target Repository \u00b6 All deliverables that fall under the Multi-Modal Publication Category will require the creation of a dedicated workspace using a GitHub Repository (repo) . We use standard GitHub activities to track issues and feature requests, as well as accept all Pull Requests ( PR's ) related to the deliverable managed by this new dedicated repo. Contributors to the new the ToIP Foundation repo SHOULD use easy and transparent activities for: Reporting a bug Discussing the current state of the ToIP Deliverable Submitting a fix Proposing process recommendations other General GitHub Workflow \u00b6 Issue Submission / Tracking Pull requests Organization Resources Code of Conduct ToIP GitHub Organization Management Policy General GitHub Resources Issue Creation PR Creation Creating a PR from a Fork Preparation \u00b6 Before proposing a new deliverable, consider the following preparatory actions: Exploring the idea in the appropriate WG Slack Channel. Socialize the idea during a WG meeting. Make use of the mailing lists to socialize the idea and to make an assessment that your proposal is novel and you will not be overlapping work already proposed. Make use of the Deliverables Portal for a current listing of all work product efforts and their statuses so that you can appropriately position your proposal as unique. Make a decision as to the type of deliverable you will be proposing. Discuss the roles each contributor will perform. Some members may be knowledgable content contributors, some may be skilled in GitHub, other may have both skills. Establish a preliminary outline for the content you will be delivering and who may be contributing specific sections of work. Proposal Readiness \u00b6 Gather Details \u00b6 The contributors need to gather some specifics before getting started: Familiarize themselves with our deliverable naming conventions Select the appropriate <TypeIndicator> Obtain a unique <4digitID> : When you are ready to create your new deliverable repository you will need to obtain a unique deliverable identifier. To assign a number to your deliverable visit this web page . Settle on a clear and concise <DeliverableName> that is descriptive, yet not verbose or vague. Create Dedicated Repository \u00b6 The ToIP Foundation provides a GitHub Template Repository to allow contributors to quickly and easily configure a new dedicated deliverables repository. The Spec-Up for ToIP Template Repository allows ToIP contributors to create new repositories with the directory structure, branches, and files necessary to bootstrap the development of Specifications using a ToIP branded version of Spec-up . Visit Spec-Up for ToIP Template Repository. Click on the Use this template button Fill out the repo creation form using the appropriate naming convention as depicted below: Make sure the trustoverip is the owner Organization Follow our deliverable naming conventions to enter a repository name such as TSS0120-layer1-protocol Select Public as the commit permissions Click on the Create repository from template button and wait for GitHub to create and prime your new repo. Visit the new repo and invite your fellow contributors by accessing the repo's Manage Access Settings Coordination of roles \u00b6 The stakeholders of this new deliverable, typically members of a task force commissioned by a ToIP WG, will need to gather make few decisions: What is the initial outline of the deliverable? Suggestions are available in the templates folder of the deliverables repo . Who will act as content authors and/or GitHub committers? How will the contributors coordinate the assignment and delivery of Markdown files to the GitHub committers? How will the sections of the deliverable outline be assigned to content authors? Prepare Proposal \u00b6 One of the members of the contributing team needs to prepare and submit the initial proposal draft. This should include the following: Open an Issue against the new repo. Use a title such as \"Prime pump for new deliverable <4digitID>\" Fork and clone the new repository. In a terminal window, change directories to the parent folder of your newly cloned repo. Rename the current README file to DEV_README [~/new-repo] ==> cp README.md DEV_README.md Edit the README.md file and replace all existing content with the content from the appropriate template file from the deliverables repo /template folder. Using your browser, navigate to the deliverables repo Click on the /templates folder Find the applicable template file and click on the Raw button to open a browser window displaying the raw Markdown text. Using your browser, select all the text, copy it to your clipboard and paste it into the README.md replacing all existing text. At the top of your file modify the title so it is in the form: <TypeIndicator><4digitID>: Friendly Version of Your Title. Minimally complete the Title and Summary sections of the README.md . Consider how your new proposal should be tagged . The template file provides an outline to guide your work. Use the outline to bootstrap your work on the deliverable. Use MUST and SHOULD per standard conventions . Put care into the details! Deliverable submissions that do not present sufficient information as suggested by the template tend to be poorly received. Submit Proposal Draft \u00b6 Commit your changes and submit a PR using previously opened issue. Open an Issue against the Deliverables Repo . Use a title such as \"Add new proposal <4digitID>\" Fork and clone the Deliverables Repo . Commit an updated version of ../results/proposed.md and push your changes. Submit a pull request using the previously opened Issue. Make sure that all of your commits satisfy the DCO requirements of the repo and conform to the license restrictions noted below . The ToIP Deliverable Maintainers will check to see if the process has been followed, and request any process changes before merging the PR. When the PR is merged, your deliverable is now formally in the Proposed state. Repo generation configuration \u00b6 Follow the ToIP Spec-up Usage Instructions for configuring the new repo. Repo organization suggestions \u00b6 You can add supporting artifacts and organize your repo filesystem structure as desired. You MAY want to: Create an images folder to store .jpg and .png files that your content may reference. Leverage PlantUML tools for the generation of UML diagrams. When doing so, you MUST include in your folder: Source: .puml files in a puml folder Output: .jpg or .png files Leverage presentation tools (i.e.: PowerPoint, Keynote). When doing so, you MUST include in your folder: Source: .ppt or .key files Output: .jpg or .png files /images /src /puml interaction_diagram.puml /presentations diagrams.key slides.ppt interaction_diagram.svg interaction_diagram.png interaction_diagram.jpg diagram_1.png slide_1.jpg Iterate on Proposal \u00b6 The contributors of this new repo can now focus on the authoring of content. Iterative updates to the repo reflecting work by contributors will depend on the decisions made by the contributors in the Authoring Coordination Approach . Submit Proposal for Approval \u00b6 Once the proposal is ready for review and approval by the sponsoring WG, the contributors should follow our Lifecycle Management Process .","title":"Rich Specification Generation"},{"location":"process/contributing_multi_specs/#purpose","text":"These contribution instructions SHOULD be used when the following are all true : The ToIP Deliverable is an instance of a Specification. The contributors have decided to collaborate using an assembly of multiple markdown files as their authoring approach. The contributors have decided that the subject deliverable will need to be published in a variety of formats. The contributors have decided to leverage one of two of the ToIP themed Specification Authoring Environments: Authoring Environment Usage View Demo(s) ToIP MkDocs Material Theme General Documentation and Specification development ToIP MkDocs Theme for Documentation , ToIP MkDocs Theme for Specs Spec-Up for ToIP which is derived from Spec-Up Specification development ToIP Spec-up Repo , Baseline Spec-up Demo","title":"Purpose"},{"location":"process/contributing_multi_specs/#toip-mkdocs-material-theme-approach","text":"Follow the Rich Content Generation instructions with one exception: Under the Repo Generation Configuration Section , delete the mkdocs.yml file, and rename mkdocs.spec.yml to mkdocs.yml .","title":"ToIP MkDocs Material Theme approach"},{"location":"process/contributing_multi_specs/#spec-up-for-toip-approach","text":"","title":"Spec-Up for ToIP approach"},{"location":"process/contributing_multi_specs/#target-repository","text":"All deliverables that fall under the Multi-Modal Publication Category will require the creation of a dedicated workspace using a GitHub Repository (repo) . We use standard GitHub activities to track issues and feature requests, as well as accept all Pull Requests ( PR's ) related to the deliverable managed by this new dedicated repo. Contributors to the new the ToIP Foundation repo SHOULD use easy and transparent activities for: Reporting a bug Discussing the current state of the ToIP Deliverable Submitting a fix Proposing process recommendations other","title":"Target Repository"},{"location":"process/contributing_multi_specs/#general-github-workflow","text":"Issue Submission / Tracking Pull requests Organization Resources Code of Conduct ToIP GitHub Organization Management Policy General GitHub Resources Issue Creation PR Creation Creating a PR from a Fork","title":"General GitHub Workflow"},{"location":"process/contributing_multi_specs/#preparation","text":"Before proposing a new deliverable, consider the following preparatory actions: Exploring the idea in the appropriate WG Slack Channel. Socialize the idea during a WG meeting. Make use of the mailing lists to socialize the idea and to make an assessment that your proposal is novel and you will not be overlapping work already proposed. Make use of the Deliverables Portal for a current listing of all work product efforts and their statuses so that you can appropriately position your proposal as unique. Make a decision as to the type of deliverable you will be proposing. Discuss the roles each contributor will perform. Some members may be knowledgable content contributors, some may be skilled in GitHub, other may have both skills. Establish a preliminary outline for the content you will be delivering and who may be contributing specific sections of work.","title":"Preparation"},{"location":"process/contributing_multi_specs/#proposal-readiness","text":"","title":"Proposal Readiness"},{"location":"process/contributing_multi_specs/#gather-details","text":"The contributors need to gather some specifics before getting started: Familiarize themselves with our deliverable naming conventions Select the appropriate <TypeIndicator> Obtain a unique <4digitID> : When you are ready to create your new deliverable repository you will need to obtain a unique deliverable identifier. To assign a number to your deliverable visit this web page . Settle on a clear and concise <DeliverableName> that is descriptive, yet not verbose or vague.","title":"Gather Details"},{"location":"process/contributing_multi_specs/#create-dedicated-repository","text":"The ToIP Foundation provides a GitHub Template Repository to allow contributors to quickly and easily configure a new dedicated deliverables repository. The Spec-Up for ToIP Template Repository allows ToIP contributors to create new repositories with the directory structure, branches, and files necessary to bootstrap the development of Specifications using a ToIP branded version of Spec-up . Visit Spec-Up for ToIP Template Repository. Click on the Use this template button Fill out the repo creation form using the appropriate naming convention as depicted below: Make sure the trustoverip is the owner Organization Follow our deliverable naming conventions to enter a repository name such as TSS0120-layer1-protocol Select Public as the commit permissions Click on the Create repository from template button and wait for GitHub to create and prime your new repo. Visit the new repo and invite your fellow contributors by accessing the repo's Manage Access Settings","title":"Create Dedicated Repository"},{"location":"process/contributing_multi_specs/#coordination-of-roles","text":"The stakeholders of this new deliverable, typically members of a task force commissioned by a ToIP WG, will need to gather make few decisions: What is the initial outline of the deliverable? Suggestions are available in the templates folder of the deliverables repo . Who will act as content authors and/or GitHub committers? How will the contributors coordinate the assignment and delivery of Markdown files to the GitHub committers? How will the sections of the deliverable outline be assigned to content authors?","title":"Coordination of roles"},{"location":"process/contributing_multi_specs/#prepare-proposal","text":"One of the members of the contributing team needs to prepare and submit the initial proposal draft. This should include the following: Open an Issue against the new repo. Use a title such as \"Prime pump for new deliverable <4digitID>\" Fork and clone the new repository. In a terminal window, change directories to the parent folder of your newly cloned repo. Rename the current README file to DEV_README [~/new-repo] ==> cp README.md DEV_README.md Edit the README.md file and replace all existing content with the content from the appropriate template file from the deliverables repo /template folder. Using your browser, navigate to the deliverables repo Click on the /templates folder Find the applicable template file and click on the Raw button to open a browser window displaying the raw Markdown text. Using your browser, select all the text, copy it to your clipboard and paste it into the README.md replacing all existing text. At the top of your file modify the title so it is in the form: <TypeIndicator><4digitID>: Friendly Version of Your Title. Minimally complete the Title and Summary sections of the README.md . Consider how your new proposal should be tagged . The template file provides an outline to guide your work. Use the outline to bootstrap your work on the deliverable. Use MUST and SHOULD per standard conventions . Put care into the details! Deliverable submissions that do not present sufficient information as suggested by the template tend to be poorly received.","title":"Prepare Proposal"},{"location":"process/contributing_multi_specs/#submit-proposal-draft","text":"Commit your changes and submit a PR using previously opened issue. Open an Issue against the Deliverables Repo . Use a title such as \"Add new proposal <4digitID>\" Fork and clone the Deliverables Repo . Commit an updated version of ../results/proposed.md and push your changes. Submit a pull request using the previously opened Issue. Make sure that all of your commits satisfy the DCO requirements of the repo and conform to the license restrictions noted below . The ToIP Deliverable Maintainers will check to see if the process has been followed, and request any process changes before merging the PR. When the PR is merged, your deliverable is now formally in the Proposed state.","title":"Submit Proposal Draft"},{"location":"process/contributing_multi_specs/#repo-generation-configuration","text":"Follow the ToIP Spec-up Usage Instructions for configuring the new repo.","title":"Repo generation configuration"},{"location":"process/contributing_multi_specs/#repo-organization-suggestions","text":"You can add supporting artifacts and organize your repo filesystem structure as desired. You MAY want to: Create an images folder to store .jpg and .png files that your content may reference. Leverage PlantUML tools for the generation of UML diagrams. When doing so, you MUST include in your folder: Source: .puml files in a puml folder Output: .jpg or .png files Leverage presentation tools (i.e.: PowerPoint, Keynote). When doing so, you MUST include in your folder: Source: .ppt or .key files Output: .jpg or .png files /images /src /puml interaction_diagram.puml /presentations diagrams.key slides.ppt interaction_diagram.svg interaction_diagram.png interaction_diagram.jpg diagram_1.png slide_1.jpg","title":"Repo organization suggestions"},{"location":"process/contributing_multi_specs/#iterate-on-proposal","text":"The contributors of this new repo can now focus on the authoring of content. Iterative updates to the repo reflecting work by contributors will depend on the decisions made by the contributors in the Authoring Coordination Approach .","title":"Iterate on Proposal"},{"location":"process/contributing_multi_specs/#submit-proposal-for-approval","text":"Once the proposal is ready for review and approval by the sponsoring WG, the contributors should follow our Lifecycle Management Process .","title":"Submit Proposal for Approval"},{"location":"process/contributing_pr/","text":"Purpose \u00b6 These contribution instructions MUST be used when the following are all true : The ToIP Deliverable is an instance of one of the following types: Recommendation - Design Principle Recommendation - Best Practice The contributors have decided to collaborate on a single markdown file as their authoring approach. Target Repository \u00b6 Our trustoverip/deliverables GitHub repo is used to maintain certain types of recommendations. We use standard GitHub activities to track issues and feature requests, as well as accept all Pull Requests ( PR's ) related to the deliverables managed in this repo. As a member contributor, use the trustoverip/deliverables repository to contribute to the ToIP Foundation in easy and transparent manner, whether it's: Reporting a bug Discussing the current state of the ToIP Deliverable Submitting a fix Proposing process recommendations other General GitHub Workflow \u00b6 Issue Submission / Tracking Pull requests Organization Resources Code of Conduct ToIP GitHub Organization Management Policy General GitHub Resources Issue Creation PR Creation Creating a PR from a Fork Preparation \u00b6 Before proposing a new deliverable, consider the following preparatory actions: Exploring the idea in the appropriate WG Slack Channel. Socialize the idea during a WG meeting. Make use of the mailing lists to socialize the idea and to make an assessment that your proposal is novel and you will not be overlapping work already proposed. Make use of the Deliverables Portal for a current listing of all work product efforts and their statuses so that you can appropriately position your proposal as unique. Make a decision as to the type of deliverable you will be proposing. Discuss the roles each contributor will perform. Some members may be knowledgable content contributors, some may be skilled in GitHub, other may have both skills. Establish a preliminary outline for the content you will be delivering and who may be contributing specific sections of work. Submit a Proposal \u00b6 Fork and clone the Deliverables Repo . In a terminal window, change directories to the recommendations folder. Pick a descriptive folder name for your new deliverable following our naming conventions . Don't pick a number yet . [~/deliverables/recommendations] ==> mkdir BP0000-utility-selection-criteria [~/deliverables/recommendations] ==> cd BP0000-utility-selection-criteria [~/deliverables/recommendations/BP0000-utility-selection-criteria] ==> Decide on a clear and simple name that is descriptive, yet not verbose or vague. Create a new folder. Navigate into your new folder. Copy the appropriate template from the templates folder to your new folder. See Exploring Templates . [~/deliverables/recommendations/BP0000-utility-selection-criteria] ==> cp ../../templates/Recommendations/Best_Practice_tmplt.md . [~/deliverables/recommendations/BP0000-utility-selection-criteria] ==> mv Best_Practice_tmplt.md BP0000-utility-selection-criteria.md The template file provides an outline to guide your work. Use the outline to bootstrap your work on the deliverable. Use MUST and SHOULD per standard conventions . Put care into the details! Deliverable submissions that do not present sufficient information as suggested by the template tend to be poorly received. You can add supporting artifacts and organize your folder as desired. You MAY want to: Create an images folder to store .jpg and .png files that your content may reference. Leverage PlantUML tools for the generation of UML diagrams. When doing so, you MUST include in your folder: Source: .puml files in a puml folder Output: .jpg or .png files Leverage presentation tools (i.e.: PowerPoint, Keynote). When doing so, you MUST include in your folder: Source: .ppt or .key files Output: .jpg or .png files /images /src /puml interaction_diagram.puml /presentations diagrams.key slides.ppt interaction_diagram.svg interaction_diagram.png interaction_diagram.jpg diagram_1.png slide_1.jpg Consider how your new proposal should be tagged . When you are ready to submit the draft proposal you will need to obtain a unique deliverable identifier. To assign a number to your deliverable submission. Get the number by loading this web page . Rename your folder name using the new number Rename your file name to reflect the new number At the top of your file modify the title so it is in the form: <TypeIndicator><4digitID>: Friendly Version of Your Title. Commit your changes. Commit an updated version of ../results/proposed.md and push your changes. Submit a pull request. Make sure that all of your commits satisfy the DCO requirements of the repo and conform to the license restrictions noted below . The ToIP Deliverable Maintainers will check to see if the process has been followed, and request any process changes before merging the PR. When the PR is merged, your deliverable is now formally in the Proposed state.","title":"Inline Document"},{"location":"process/contributing_pr/#purpose","text":"These contribution instructions MUST be used when the following are all true : The ToIP Deliverable is an instance of one of the following types: Recommendation - Design Principle Recommendation - Best Practice The contributors have decided to collaborate on a single markdown file as their authoring approach.","title":"Purpose"},{"location":"process/contributing_pr/#target-repository","text":"Our trustoverip/deliverables GitHub repo is used to maintain certain types of recommendations. We use standard GitHub activities to track issues and feature requests, as well as accept all Pull Requests ( PR's ) related to the deliverables managed in this repo. As a member contributor, use the trustoverip/deliverables repository to contribute to the ToIP Foundation in easy and transparent manner, whether it's: Reporting a bug Discussing the current state of the ToIP Deliverable Submitting a fix Proposing process recommendations other","title":"Target Repository"},{"location":"process/contributing_pr/#general-github-workflow","text":"Issue Submission / Tracking Pull requests Organization Resources Code of Conduct ToIP GitHub Organization Management Policy General GitHub Resources Issue Creation PR Creation Creating a PR from a Fork","title":"General GitHub Workflow"},{"location":"process/contributing_pr/#preparation","text":"Before proposing a new deliverable, consider the following preparatory actions: Exploring the idea in the appropriate WG Slack Channel. Socialize the idea during a WG meeting. Make use of the mailing lists to socialize the idea and to make an assessment that your proposal is novel and you will not be overlapping work already proposed. Make use of the Deliverables Portal for a current listing of all work product efforts and their statuses so that you can appropriately position your proposal as unique. Make a decision as to the type of deliverable you will be proposing. Discuss the roles each contributor will perform. Some members may be knowledgable content contributors, some may be skilled in GitHub, other may have both skills. Establish a preliminary outline for the content you will be delivering and who may be contributing specific sections of work.","title":"Preparation"},{"location":"process/contributing_pr/#submit-a-proposal","text":"Fork and clone the Deliverables Repo . In a terminal window, change directories to the recommendations folder. Pick a descriptive folder name for your new deliverable following our naming conventions . Don't pick a number yet . [~/deliverables/recommendations] ==> mkdir BP0000-utility-selection-criteria [~/deliverables/recommendations] ==> cd BP0000-utility-selection-criteria [~/deliverables/recommendations/BP0000-utility-selection-criteria] ==> Decide on a clear and simple name that is descriptive, yet not verbose or vague. Create a new folder. Navigate into your new folder. Copy the appropriate template from the templates folder to your new folder. See Exploring Templates . [~/deliverables/recommendations/BP0000-utility-selection-criteria] ==> cp ../../templates/Recommendations/Best_Practice_tmplt.md . [~/deliverables/recommendations/BP0000-utility-selection-criteria] ==> mv Best_Practice_tmplt.md BP0000-utility-selection-criteria.md The template file provides an outline to guide your work. Use the outline to bootstrap your work on the deliverable. Use MUST and SHOULD per standard conventions . Put care into the details! Deliverable submissions that do not present sufficient information as suggested by the template tend to be poorly received. You can add supporting artifacts and organize your folder as desired. You MAY want to: Create an images folder to store .jpg and .png files that your content may reference. Leverage PlantUML tools for the generation of UML diagrams. When doing so, you MUST include in your folder: Source: .puml files in a puml folder Output: .jpg or .png files Leverage presentation tools (i.e.: PowerPoint, Keynote). When doing so, you MUST include in your folder: Source: .ppt or .key files Output: .jpg or .png files /images /src /puml interaction_diagram.puml /presentations diagrams.key slides.ppt interaction_diagram.svg interaction_diagram.png interaction_diagram.jpg diagram_1.png slide_1.jpg Consider how your new proposal should be tagged . When you are ready to submit the draft proposal you will need to obtain a unique deliverable identifier. To assign a number to your deliverable submission. Get the number by loading this web page . Rename your folder name using the new number Rename your file name to reflect the new number At the top of your file modify the title so it is in the form: <TypeIndicator><4digitID>: Friendly Version of Your Title. Commit your changes. Commit an updated version of ../results/proposed.md and push your changes. Submit a pull request. Make sure that all of your commits satisfy the DCO requirements of the repo and conform to the license restrictions noted below . The ToIP Deliverable Maintainers will check to see if the process has been followed, and request any process changes before merging the PR. When the PR is merged, your deliverable is now formally in the Proposed state.","title":"Submit a Proposal"},{"location":"process/github-issues/","text":"Issue Management \u00b6 ToIP Deliverables that are not on the brink of changing status are discussed through Github Issues . We generally use Issues to discuss changes that are controversial, and pull requests ( PRs ) to propose changes that are vetted. This keeps the PR backlog small and avoids ineffective use of mailing-lists. Issue Creation Process \u00b6 ToIP Deliverables may be managed in their own dedicated GitHub Repository or in the trustoverip/deliverables repo. Deliverables Repository \u00b6 If the subject deliverable is one of the following types: * Recommendation - Design Principle * Recommendation - Best Practice the follow these instructions: Any community member can open an issue. Visit the trustoverip/deliverables - Issues dashboard and select the appropriate button for the type of Issue you desire to open. Depending on your selection, you will be presented with an Issue Template which will help you clearly communicate the relationship of your contribution to the subject deliverable. Each Issue Template will allow you to specify the Deliverable Number in the title. For example, to open an issue on Deliverable 0025 , an appropriate title for the issue might be: [BP0025]: Need better diagram in Reference section When the community feels that it's reasonable to suggest a formal status change for a deliverable, best efforts are made to resolve all open issues against it. Then a PR is raised against the deliverable's main README.md , where the status field in the header is updated. Discussion about the status change typically takes place in the comment stream for the PR, with issues being reserved for non-status-change topics. Dedicated Deliverable Repository \u00b6 If the subject deliverable is not one of the following types: * Recommendation - Design Principle * Recommendation - Best Practice then you should refer to the Issues page for the dedicate repository URL: https://github.com/trustoverip/<repo_name>/issues where is the name of the dedicated deliverable repository.","title":"Issue Management"},{"location":"process/github-issues/#issue-management","text":"ToIP Deliverables that are not on the brink of changing status are discussed through Github Issues . We generally use Issues to discuss changes that are controversial, and pull requests ( PRs ) to propose changes that are vetted. This keeps the PR backlog small and avoids ineffective use of mailing-lists.","title":"Issue Management"},{"location":"process/github-issues/#issue-creation-process","text":"ToIP Deliverables may be managed in their own dedicated GitHub Repository or in the trustoverip/deliverables repo.","title":"Issue Creation Process"},{"location":"process/github-issues/#deliverables-repository","text":"If the subject deliverable is one of the following types: * Recommendation - Design Principle * Recommendation - Best Practice the follow these instructions: Any community member can open an issue. Visit the trustoverip/deliverables - Issues dashboard and select the appropriate button for the type of Issue you desire to open. Depending on your selection, you will be presented with an Issue Template which will help you clearly communicate the relationship of your contribution to the subject deliverable. Each Issue Template will allow you to specify the Deliverable Number in the title. For example, to open an issue on Deliverable 0025 , an appropriate title for the issue might be: [BP0025]: Need better diagram in Reference section When the community feels that it's reasonable to suggest a formal status change for a deliverable, best efforts are made to resolve all open issues against it. Then a PR is raised against the deliverable's main README.md , where the status field in the header is updated. Discussion about the status change typically takes place in the comment stream for the PR, with issues being reserved for non-status-change topics.","title":"Deliverables Repository"},{"location":"process/github-issues/#dedicated-deliverable-repository","text":"If the subject deliverable is not one of the following types: * Recommendation - Design Principle * Recommendation - Best Practice then you should refer to the Issues page for the dedicate repository URL: https://github.com/trustoverip/<repo_name>/issues where is the name of the dedicated deliverable repository.","title":"Dedicated Deliverable Repository"},{"location":"process/github-pullrequests/","text":"Contribution Chanage Management \u00b6 We collaborate on the work of ToIP Foundation via pull requests ( PRs ) against the repository that is managing a specific deliverable. Pull Request Submissions \u00b6 ToIP Deliverables may be managed in their own dedicated GitHub Repository or in the trustoverip/deliverables repo. Fork the appropriate deliverables repo: Deliverables Repo . Dedicated Repository: https://github.com/trustoverip/<repo_name> , where <repo_name> is the name of the dedicated deliverable repository. Each PR SHOULD be linked to an Issue . Pull Request Decisions \u00b6 Standard GitHub processing is used. Closed : The PR was reviewed by the WG but it was decided to close it without merging it. Merged : The WG agreed to merge the PR .","title":"Change Management"},{"location":"process/github-pullrequests/#contribution-chanage-management","text":"We collaborate on the work of ToIP Foundation via pull requests ( PRs ) against the repository that is managing a specific deliverable.","title":"Contribution Chanage Management"},{"location":"process/github-pullrequests/#pull-request-submissions","text":"ToIP Deliverables may be managed in their own dedicated GitHub Repository or in the trustoverip/deliverables repo. Fork the appropriate deliverables repo: Deliverables Repo . Dedicated Repository: https://github.com/trustoverip/<repo_name> , where <repo_name> is the name of the dedicated deliverable repository. Each PR SHOULD be linked to an Issue .","title":"Pull Request Submissions"},{"location":"process/github-pullrequests/#pull-request-decisions","text":"Standard GitHub processing is used. Closed : The PR was reviewed by the WG but it was decided to close it without merging it. Merged : The WG agreed to merge the PR .","title":"Pull Request Decisions"},{"location":"process/lifecycle_management/","text":"Lifecycle Management Process \u00b6 All ToIP deliverables are governed by the standard three-stage approval process defined by our JDF charter (note that this process is the same for all JDF projects at the Linux Foundation). This document describes the process for the maturation of ToIP Deliverables . Each deliverable, regardless of type, follows the same standard lifecycle. Ideation \u00b6 An essential part of the contribution process for the ToIP Foundation is the creative process of generating, developing, and communicating new ideas/concepts relative to our mission. Ideation may begin with individual members, it will eventually need to be brought top the attention of one of the WGs. The ideation process is often unstructured and will produce a draft document that can be used for initial discussions with a WG. If the idea is supported by a WG, a Task Force (TF) will be commissioned to formalize the idea into a proposal. Process Stages \u00b6 Proposed \u00b6 A proposal reflects the transition of the ideation process into a formalized suggestion for work to be performed by a WG. Based on the type of deliverable being proposed, ideation stakeholders will use a ToIP Template to develop a deliverable that enters the process with a status of proposed . A proposal is considered a \" work-in-progress \" until it is formally endorsed by the sponsoring WG. Depending on the type of deliverable, the submission process for a proposal will depend on the preferences and decisions of the contributors. Authoring Approach Publication Category Contribution Instructions Raw File Basic Standard Pull-Request Many Files Basic Document Generation Many Files Multi-Modal Rich Content Generation Approved \u00b6 In order for a deliverable to graduate to approved status, it MUST be sponsored by a WG. While each WG may have their own lifecycle management process and approval criteria, it is the responsibility of the WG that is sponsoring the deliverable to formally submit a PR against the deliverables repo that updates the originally proposed deliverable from proposed to approved status. A WG (or a TF within the WG) incubates the proposed deliverable via whatever process it chooses until it is ready for approval by the WG as a whole. This approval can be via consensus at a meeting of the WG or on the mailing list. In either case, it passes if there are no objections. If there are objections that cannot be resolved, then a formal vote of the WG is required. In this case the Draft Deliverable must be approved by a supermajority (75%) of the participants. Once approved, it becomes a Working Group Approved Deliverable. It can stop here if WG members do not feel the need for further advancement. An approved deliverable of the type specification may seek further incubation down the standards track if the community has decided to submit the deliverable to a SDO. Accepted \u00b6 If a WG seeks Foundation-wide approval, it must submit the deliverable in accepted state to the Executive Director for a vote by the Steering Committee. As with a WG vote, this vote can be by consensus if there are no objections. If there are objections that cannot be resolved, a formal vote requires approval by a supermajority (75%) of the participants. Deliverable State Management \u00b6 The ToIP Steering Committee and Working Groups each perform a role in the management of state changes to ToIP Deliverables. The current status of all deliverables is available under the Activity Status section of our Deliverables Portal . Alternative Stages \u00b6 Submission to an SDO \u00b6 Once a TSS becomes reaches the accepted state, the ToIP Steering Committee can vote to submit it to a designated standards body. Retirement \u00b6 If a WG fails to see progress by the stakeholders associated with a deliverable proposal submission, the WG can change the status of the deliverable to retired . This action by the WG can be achieved via consensus at a meeting of the WG or on the WG mailing list. The causes of such a change vary but generally can result from: a decision to withdraw the proposal from community consideration by its authors; a determination that implementation seems permanently stalled an observation that significant refinements require a superseding proposal If a retired deliverable has been superseded, its Superseded By field should contain a link to the newer spec, and the newer spec's Supersedes field should contain a link to the older spec. Permalinks are not broken.","title":"Lifecycle Management "},{"location":"process/lifecycle_management/#lifecycle-management-process","text":"All ToIP deliverables are governed by the standard three-stage approval process defined by our JDF charter (note that this process is the same for all JDF projects at the Linux Foundation). This document describes the process for the maturation of ToIP Deliverables . Each deliverable, regardless of type, follows the same standard lifecycle.","title":"Lifecycle Management Process"},{"location":"process/lifecycle_management/#ideation","text":"An essential part of the contribution process for the ToIP Foundation is the creative process of generating, developing, and communicating new ideas/concepts relative to our mission. Ideation may begin with individual members, it will eventually need to be brought top the attention of one of the WGs. The ideation process is often unstructured and will produce a draft document that can be used for initial discussions with a WG. If the idea is supported by a WG, a Task Force (TF) will be commissioned to formalize the idea into a proposal.","title":"Ideation"},{"location":"process/lifecycle_management/#process-stages","text":"","title":"Process Stages"},{"location":"process/lifecycle_management/#proposed","text":"A proposal reflects the transition of the ideation process into a formalized suggestion for work to be performed by a WG. Based on the type of deliverable being proposed, ideation stakeholders will use a ToIP Template to develop a deliverable that enters the process with a status of proposed . A proposal is considered a \" work-in-progress \" until it is formally endorsed by the sponsoring WG. Depending on the type of deliverable, the submission process for a proposal will depend on the preferences and decisions of the contributors. Authoring Approach Publication Category Contribution Instructions Raw File Basic Standard Pull-Request Many Files Basic Document Generation Many Files Multi-Modal Rich Content Generation","title":"Proposed"},{"location":"process/lifecycle_management/#approved","text":"In order for a deliverable to graduate to approved status, it MUST be sponsored by a WG. While each WG may have their own lifecycle management process and approval criteria, it is the responsibility of the WG that is sponsoring the deliverable to formally submit a PR against the deliverables repo that updates the originally proposed deliverable from proposed to approved status. A WG (or a TF within the WG) incubates the proposed deliverable via whatever process it chooses until it is ready for approval by the WG as a whole. This approval can be via consensus at a meeting of the WG or on the mailing list. In either case, it passes if there are no objections. If there are objections that cannot be resolved, then a formal vote of the WG is required. In this case the Draft Deliverable must be approved by a supermajority (75%) of the participants. Once approved, it becomes a Working Group Approved Deliverable. It can stop here if WG members do not feel the need for further advancement. An approved deliverable of the type specification may seek further incubation down the standards track if the community has decided to submit the deliverable to a SDO.","title":"Approved"},{"location":"process/lifecycle_management/#accepted","text":"If a WG seeks Foundation-wide approval, it must submit the deliverable in accepted state to the Executive Director for a vote by the Steering Committee. As with a WG vote, this vote can be by consensus if there are no objections. If there are objections that cannot be resolved, a formal vote requires approval by a supermajority (75%) of the participants.","title":"Accepted"},{"location":"process/lifecycle_management/#deliverable-state-management","text":"The ToIP Steering Committee and Working Groups each perform a role in the management of state changes to ToIP Deliverables. The current status of all deliverables is available under the Activity Status section of our Deliverables Portal .","title":"Deliverable State Management"},{"location":"process/lifecycle_management/#alternative-stages","text":"","title":"Alternative Stages"},{"location":"process/lifecycle_management/#submission-to-an-sdo","text":"Once a TSS becomes reaches the accepted state, the ToIP Steering Committee can vote to submit it to a designated standards body.","title":"Submission to an SDO"},{"location":"process/lifecycle_management/#retirement","text":"If a WG fails to see progress by the stakeholders associated with a deliverable proposal submission, the WG can change the status of the deliverable to retired . This action by the WG can be achieved via consensus at a meeting of the WG or on the WG mailing list. The causes of such a change vary but generally can result from: a decision to withdraw the proposal from community consideration by its authors; a determination that implementation seems permanently stalled an observation that significant refinements require a superseding proposal If a retired deliverable has been superseded, its Superseded By field should contain a link to the newer spec, and the newer spec's Supersedes field should contain a link to the older spec. Permalinks are not broken.","title":"Retirement"},{"location":"process/process_concepts/","text":"Introduction \u00b6 The intent of the ToIP Foundation's approach to the development of deliverables is to enable a simple, standardized and semi-automate production process while maximizing leverage of existing tooling and minimizing dependence on external vendors or custom code. Requirements \u00b6 Authoring Tool Agnostic : Foundation processes SHOULD NOT dictate which tools should be used for the authoring of content. Plaintext Authoring Language : Foundation processes MUST establish a baseline content format for the writing of content during the development of our various deliverable types. Markdown is a simple and easy-to-use markup language that will format virtually any document for easy sharing between computers, mobile phones, and people. Formatting text in Markdown has a very gentle learning curve . Processing Tools : Foundation processes SHOULD establish a common set of styling options so that members of Work Groups and Task Forces can to generate ToIP branded work-products that are consistent across the Foundation and acceptable at the SDO level. Online Directory : Foundation processes SHOULD have a simple one-stop-site for all ToIP deliverables that provides a simple directory of our work-products that DOES NOT require GitHub access. Conceptual Approach \u00b6 Stage 1: Authoring \u00b6 Our desired approach will leverage existing authoring tools for three reasons: These are the tools ToIP members already know. They support a wide range of technical knowledge. The Foundation does not need to make any investment into their development or support (beyond producing template files (outlines) for our different deliverable types). All of these tools can store files in their native formats and locations until they need to be converted into Markdown and contributed into a Github Repository. State 2: Central Services \u00b6 Github Repositories \u00b6 This is the standard file storage and version control system used by Linux Foundation projects. Our desired approach requires that we standardize how we used GitHub in order to support a permalink service. Permalink and Terminology Database \u00b6 The Concepts and Terminology Working Group will determine the tooling it will need to provide a database that permits mapping relationships and adding labels and tags to terms and their definitions. Note that the definition of each term could be written to GitHub as a Markdown file. Permalink and Terminology Editor \u00b6 It is anticipated that the Concepts and Terminology Working Group will develop and maintain a content management tool for terms in order to provide permalinks for all ToIP deliverables. Stage 3: Publishing \u00b6 The publishing process must enable each deliverable stored in Github to be published in all required formats, including HTML (styled according to one or more ToIP Foundation standard CSS files), PDFs, and aggregate Markdown files. Conclusion \u00b6 The selection of the Markdown Language allows members freedom of choice when authoring content. Markdown files can be pre-processed using existing open-source tools to minimize costs and dependencies. MkDocs and Spec-Up are flexible publishing platforms that leverage the Markdown language and can easily be themed to provide flexibility and consistency. Authoring Environment Usage View Demo(s) ToIP MkDocs Material Theme General Documentation and Specification development ToIP MkDocs Theme for Documentation , ToIP MkDocs Theme for Specs Spec-Up for ToIP which is derived from Spec-Up Specification development ToIP Spec-up Repo , Baseline Spec-up Demo","title":"Process Concepts"},{"location":"process/process_concepts/#introduction","text":"The intent of the ToIP Foundation's approach to the development of deliverables is to enable a simple, standardized and semi-automate production process while maximizing leverage of existing tooling and minimizing dependence on external vendors or custom code.","title":"Introduction"},{"location":"process/process_concepts/#requirements","text":"Authoring Tool Agnostic : Foundation processes SHOULD NOT dictate which tools should be used for the authoring of content. Plaintext Authoring Language : Foundation processes MUST establish a baseline content format for the writing of content during the development of our various deliverable types. Markdown is a simple and easy-to-use markup language that will format virtually any document for easy sharing between computers, mobile phones, and people. Formatting text in Markdown has a very gentle learning curve . Processing Tools : Foundation processes SHOULD establish a common set of styling options so that members of Work Groups and Task Forces can to generate ToIP branded work-products that are consistent across the Foundation and acceptable at the SDO level. Online Directory : Foundation processes SHOULD have a simple one-stop-site for all ToIP deliverables that provides a simple directory of our work-products that DOES NOT require GitHub access.","title":"Requirements"},{"location":"process/process_concepts/#conceptual-approach","text":"","title":"Conceptual Approach"},{"location":"process/process_concepts/#stage-1-authoring","text":"Our desired approach will leverage existing authoring tools for three reasons: These are the tools ToIP members already know. They support a wide range of technical knowledge. The Foundation does not need to make any investment into their development or support (beyond producing template files (outlines) for our different deliverable types). All of these tools can store files in their native formats and locations until they need to be converted into Markdown and contributed into a Github Repository.","title":"Stage 1: Authoring"},{"location":"process/process_concepts/#state-2-central-services","text":"","title":"State 2: Central Services"},{"location":"process/process_concepts/#github-repositories","text":"This is the standard file storage and version control system used by Linux Foundation projects. Our desired approach requires that we standardize how we used GitHub in order to support a permalink service.","title":"Github Repositories"},{"location":"process/process_concepts/#permalink-and-terminology-database","text":"The Concepts and Terminology Working Group will determine the tooling it will need to provide a database that permits mapping relationships and adding labels and tags to terms and their definitions. Note that the definition of each term could be written to GitHub as a Markdown file.","title":"Permalink and Terminology Database"},{"location":"process/process_concepts/#permalink-and-terminology-editor","text":"It is anticipated that the Concepts and Terminology Working Group will develop and maintain a content management tool for terms in order to provide permalinks for all ToIP deliverables.","title":"Permalink and Terminology Editor"},{"location":"process/process_concepts/#stage-3-publishing","text":"The publishing process must enable each deliverable stored in Github to be published in all required formats, including HTML (styled according to one or more ToIP Foundation standard CSS files), PDFs, and aggregate Markdown files.","title":"Stage 3: Publishing"},{"location":"process/process_concepts/#conclusion","text":"The selection of the Markdown Language allows members freedom of choice when authoring content. Markdown files can be pre-processed using existing open-source tools to minimize costs and dependencies. MkDocs and Spec-Up are flexible publishing platforms that leverage the Markdown language and can easily be themed to provide flexibility and consistency. Authoring Environment Usage View Demo(s) ToIP MkDocs Material Theme General Documentation and Specification development ToIP MkDocs Theme for Documentation , ToIP MkDocs Theme for Specs Spec-Up for ToIP which is derived from Spec-Up Specification development ToIP Spec-up Repo , Baseline Spec-up Demo","title":"Conclusion"},{"location":"process/state_mgmt/","text":"All ToIP deliverables are governed by the standard three-stage approval process defined by our JDF charter (note that this process is the same for all JDF projects at the Linux Foundation). Our Lifecycle Management Process describes the process for the maturation of ToIP Deliverables . Each deliverable, regardless of type, follows the same standard lifecycle. Governance \u00b6 The ToIP Steering Committee and Working Groups each perform a role in the management of state changes to ToIP Deliverables. The current status of all deliverables is available under the Activity Status section of our Deliverables Portal . Deliverable State Governing Body Instructions Proposed Working Group Submit a Proposal Approved Working Group Working Group Approved Deliverable Accepted Steering Committee Foundation-wide Approved Deliverable Instructions \u00b6 Working Group Approved Deliverable \u00b6 Work through the incubation process defined by the WG that is sponsoring your deliverable. Once the sponsoring WG agrees to graduate the deliverable from proposed to approved status, a WG voting member MUST perform the following actions: Determine the target deliverable repo that manages the deliverable Open an issue against the target deliverable repo . Fork the target deliverable repo Change the following header details in the 'README.md' - Status: [APPROVED](./process/lifecycle_management.md) - Since: YYYY-MM-DD (date of WG Approval) - Status Note: (explanation of state change, could be a link to WG Meeting Minutes) Commit changes and submit a PR against the target deliverable repo referencing the issue created in Step 2. The PR comment should document why the status is being changed. Open an issue against the Deliverables Repo . Fork the Deliverables Repo Make the appropriate changes to the /results/proposed.md and /results/approved.md files. Commit changes and submit a PR against the Deliverables Repo . The PR comment should document the reason for the change. Foundation-wide Approved Deliverable \u00b6 If the sponsoring WG seeks Foundation-wide approval, it must submit the deliverable in accepted state to the Executive Director for a vote by the Steering Committee. Coordinate with the Executive Director on a Steering Committee Meeting date and agenda vote. Prepare for planned meeting by selecting a WG voting member to perform the following actions: Determine the target deliverable repo that manages the deliverable Open an issue against the target deliverable repo . Fork the target deliverable repo Change the following header details in the 'README.md' - Status: [ACCEPTED](./process/lifecycle_management.md) - Since: YYYY-MM-DD (date of PLANNED Vote) - Status Note: (explanation of state change, could be a link to WG Meeting Minutes) Commit changes and submit a PR against the target deliverable repo referencing the issue created in Step 2. The PR comment should document why the status is being changed. Open an issue against the Deliverables Repo . Fork the Deliverables Repo Make the appropriate changes to the /results/approved.md and /results/accepted.md files. Commit changes and submit a PR against the Deliverables Repo . The PR comment should document the reason for the change.","title":"State Management"},{"location":"process/state_mgmt/#governance","text":"The ToIP Steering Committee and Working Groups each perform a role in the management of state changes to ToIP Deliverables. The current status of all deliverables is available under the Activity Status section of our Deliverables Portal . Deliverable State Governing Body Instructions Proposed Working Group Submit a Proposal Approved Working Group Working Group Approved Deliverable Accepted Steering Committee Foundation-wide Approved Deliverable","title":"Governance"},{"location":"process/state_mgmt/#instructions","text":"","title":"Instructions"},{"location":"process/state_mgmt/#working-group-approved-deliverable","text":"Work through the incubation process defined by the WG that is sponsoring your deliverable. Once the sponsoring WG agrees to graduate the deliverable from proposed to approved status, a WG voting member MUST perform the following actions: Determine the target deliverable repo that manages the deliverable Open an issue against the target deliverable repo . Fork the target deliverable repo Change the following header details in the 'README.md' - Status: [APPROVED](./process/lifecycle_management.md) - Since: YYYY-MM-DD (date of WG Approval) - Status Note: (explanation of state change, could be a link to WG Meeting Minutes) Commit changes and submit a PR against the target deliverable repo referencing the issue created in Step 2. The PR comment should document why the status is being changed. Open an issue against the Deliverables Repo . Fork the Deliverables Repo Make the appropriate changes to the /results/proposed.md and /results/approved.md files. Commit changes and submit a PR against the Deliverables Repo . The PR comment should document the reason for the change.","title":"Working Group Approved Deliverable"},{"location":"process/state_mgmt/#foundation-wide-approved-deliverable","text":"If the sponsoring WG seeks Foundation-wide approval, it must submit the deliverable in accepted state to the Executive Director for a vote by the Steering Committee. Coordinate with the Executive Director on a Steering Committee Meeting date and agenda vote. Prepare for planned meeting by selecting a WG voting member to perform the following actions: Determine the target deliverable repo that manages the deliverable Open an issue against the target deliverable repo . Fork the target deliverable repo Change the following header details in the 'README.md' - Status: [ACCEPTED](./process/lifecycle_management.md) - Since: YYYY-MM-DD (date of PLANNED Vote) - Status Note: (explanation of state change, could be a link to WG Meeting Minutes) Commit changes and submit a PR against the target deliverable repo referencing the issue created in Step 2. The PR comment should document why the status is being changed. Open an issue against the Deliverables Repo . Fork the Deliverables Repo Make the appropriate changes to the /results/approved.md and /results/accepted.md files. Commit changes and submit a PR against the Deliverables Repo . The PR comment should document the reason for the change.","title":"Foundation-wide Approved Deliverable"},{"location":"process/tags/","text":"Search Optimization \u00b6 We categorize ToIP Deliverables with tags to enrich searches. Usage \u00b6 Tags are specified in the header section of each ToIP Deliverable. - Tags: #spec, #gswg In this example, comma delimited tags are used to associate a deliverable with a specification being sponsored by the Governance Stack WG. Approved Tags \u00b6 spec \u00b6 Conveys this deliverables intended path towards a TSS submission to an SDO. glossary \u00b6 Declares this deliverable a subset of all ToIP Foundation Glossaries. recommendation \u00b6 Declares this deliverable a subset of all ToIP Foundation Recommendations. guide \u00b6 Declares this deliverable a subset of all ToIP Foundation Guides. whitepaper \u00b6 Declares this deliverable a subset of all ToIP Foundation white-papers. efwg \u00b6 Signifies a deliverable sponsored by the Ecosystem Foundry WG. gswg \u00b6 Signifies a deliverable sponsored by the Governance Stack WG. tswg \u00b6 Signifies a deliverable sponsored by the Technology Stack WG. ufwg \u00b6 Signifies a deliverable sponsored by the Utility Foundry WG.","title":"Search Optimization"},{"location":"process/tags/#search-optimization","text":"We categorize ToIP Deliverables with tags to enrich searches.","title":"Search Optimization"},{"location":"process/tags/#usage","text":"Tags are specified in the header section of each ToIP Deliverable. - Tags: #spec, #gswg In this example, comma delimited tags are used to associate a deliverable with a specification being sponsored by the Governance Stack WG.","title":"Usage"},{"location":"process/tags/#approved-tags","text":"","title":"Approved Tags"},{"location":"process/tags/#spec","text":"Conveys this deliverables intended path towards a TSS submission to an SDO.","title":"spec"},{"location":"process/tags/#glossary","text":"Declares this deliverable a subset of all ToIP Foundation Glossaries.","title":"glossary"},{"location":"process/tags/#recommendation","text":"Declares this deliverable a subset of all ToIP Foundation Recommendations.","title":"recommendation"},{"location":"process/tags/#guide","text":"Declares this deliverable a subset of all ToIP Foundation Guides.","title":"guide"},{"location":"process/tags/#whitepaper","text":"Declares this deliverable a subset of all ToIP Foundation white-papers.","title":"whitepaper"},{"location":"process/tags/#efwg","text":"Signifies a deliverable sponsored by the Ecosystem Foundry WG.","title":"efwg"},{"location":"process/tags/#gswg","text":"Signifies a deliverable sponsored by the Governance Stack WG.","title":"gswg"},{"location":"process/tags/#tswg","text":"Signifies a deliverable sponsored by the Technology Stack WG.","title":"tswg"},{"location":"process/tags/#ufwg","text":"Signifies a deliverable sponsored by the Utility Foundry WG.","title":"ufwg"},{"location":"process/work_product_mgmt/","text":"Management of Deliverables \u00b6 Publication Categories \u00b6 Each deliverable produced by the ToIP Foundation may be rendered for publication in a variety of formats. There are two categories: Publication Category Description Format Options Basic A work-product rendered in only one format. Markdown Multi-Modal A work-product rendered in multiple formats. Markdown, PDF, HTML Table 2: Depicts the possible publication categories. Note: Regardless of publication category, the authoring process may leverage more than one Markdown file to produce the final work-product. Publication Access \u00b6 This repo serves as the storage repository for work-products within the Basic publication category. These work-products can be found in the recommendations folder. Each work-product within the Multi-Modal publication category will have a dedicated repository within the ToIP Github Organization with unique publication process details. Naming Convention \u00b6 Type Indicators \u00b6 Deliverable Type Type Indicator Publication Category Target Workspace Specification TSS Multi-Modal Dedicated Repo Glossary GL Multi-Modal TBD: Highly dependent in process proposed by CTWG. Recommendation - TIP TIP Multi-Modal Dedicated Repo Recommendation - Design Principle DP Basic Subfolder Recommendation - Best Practice BP Basic Subfolder Guide - Governance Guide GG Multi-Modal Dedicated Repo Guide - Implementation Guide IG Multi-Modal Dedicated Repo White Paper WP Multi-Modal Dedicated Repo Common Publication Category Details \u00b6 Usage Convention Comments Example Deliverable Title ToIP <TypeIndicator><4digitID>: <DeliverableName> <TypeIndicator> should be uppercase; <DeliverableName> ToIP BP9999: Utility Selection Criteria Filename <TypeIndicator><4digitID>-<DeliverableName> <TypeIndicator> should be uppercase; <DeliverableName> should be lowercase and each word separated by \"-\". BP9999-utility-selection-criteria Basic Publication Category Workspaces \u00b6 Usage Convention Comments Example Subfolder name within recommendations folder <TypeIndicator><4digitID>-<DeliverableName> <TypeIndicator> should be uppercase; <DeliverableName> should be lowercase and each word separated by \"-\". BP9999-utility-selection-criteria Multi-Modal Publication Category Workspaces \u00b6 Usage Convention Comments Example Dedicated Repo <TypeIndicator><4digitID>-<DeliverableName> <TypeIndicator> should be uppercase; <DeliverableName> should be lowercase and each word separated by \"-\". BP9999-utility-selection-criteria Unique Deliverable Identifier \u00b6 Our trustoverip/next-deliverable-num repo provides a simple webpage generator for the next available 4-digit deliverable identifier. This number is computed by determining the number of repos in the GitHub Org plus the number of existing folders in the recommendations folder. See Issue 1 .","title":"Resource Management"},{"location":"process/work_product_mgmt/#management-of-deliverables","text":"","title":"Management of Deliverables"},{"location":"process/work_product_mgmt/#publication-categories","text":"Each deliverable produced by the ToIP Foundation may be rendered for publication in a variety of formats. There are two categories: Publication Category Description Format Options Basic A work-product rendered in only one format. Markdown Multi-Modal A work-product rendered in multiple formats. Markdown, PDF, HTML Table 2: Depicts the possible publication categories. Note: Regardless of publication category, the authoring process may leverage more than one Markdown file to produce the final work-product.","title":"Publication Categories"},{"location":"process/work_product_mgmt/#publication-access","text":"This repo serves as the storage repository for work-products within the Basic publication category. These work-products can be found in the recommendations folder. Each work-product within the Multi-Modal publication category will have a dedicated repository within the ToIP Github Organization with unique publication process details.","title":"Publication Access"},{"location":"process/work_product_mgmt/#naming-convention","text":"","title":"Naming Convention"},{"location":"process/work_product_mgmt/#type-indicators","text":"Deliverable Type Type Indicator Publication Category Target Workspace Specification TSS Multi-Modal Dedicated Repo Glossary GL Multi-Modal TBD: Highly dependent in process proposed by CTWG. Recommendation - TIP TIP Multi-Modal Dedicated Repo Recommendation - Design Principle DP Basic Subfolder Recommendation - Best Practice BP Basic Subfolder Guide - Governance Guide GG Multi-Modal Dedicated Repo Guide - Implementation Guide IG Multi-Modal Dedicated Repo White Paper WP Multi-Modal Dedicated Repo","title":"Type Indicators"},{"location":"process/work_product_mgmt/#common-publication-category-details","text":"Usage Convention Comments Example Deliverable Title ToIP <TypeIndicator><4digitID>: <DeliverableName> <TypeIndicator> should be uppercase; <DeliverableName> ToIP BP9999: Utility Selection Criteria Filename <TypeIndicator><4digitID>-<DeliverableName> <TypeIndicator> should be uppercase; <DeliverableName> should be lowercase and each word separated by \"-\". BP9999-utility-selection-criteria","title":"Common Publication Category Details"},{"location":"process/work_product_mgmt/#basic-publication-category-workspaces","text":"Usage Convention Comments Example Subfolder name within recommendations folder <TypeIndicator><4digitID>-<DeliverableName> <TypeIndicator> should be uppercase; <DeliverableName> should be lowercase and each word separated by \"-\". BP9999-utility-selection-criteria","title":"Basic Publication Category Workspaces"},{"location":"process/work_product_mgmt/#multi-modal-publication-category-workspaces","text":"Usage Convention Comments Example Dedicated Repo <TypeIndicator><4digitID>-<DeliverableName> <TypeIndicator> should be uppercase; <DeliverableName> should be lowercase and each word separated by \"-\". BP9999-utility-selection-criteria","title":"Multi-Modal Publication Category Workspaces"},{"location":"process/work_product_mgmt/#unique-deliverable-identifier","text":"Our trustoverip/next-deliverable-num repo provides a simple webpage generator for the next available 4-digit deliverable identifier. This number is computed by determining the number of repos in the GitHub Org plus the number of existing folders in the recommendations folder. See Issue 1 .","title":"Unique Deliverable Identifier"},{"location":"process/work_products/","text":"ToIP Deliverables \u00b6 The ToIP Foundation produces a wide range of deliverables that are organized under the five (5) categrories: Deliverable Type Designed to be: Specification Implemented (in code) Glossary Incorporated (in other documents) Recommendation Followed (in practice) Guides Executed (in operation) White Paper Understood (to support decisions) Table 1: The primary differences between the five types of deliverables. Deliverable Types \u00b6 Specifications \u00b6 The most common deliverable under a JDF charter is a specification . At the ToIP Foundation, a standards-track specification is called a TSS (ToIP Standard Specification). This acronym was chosen to be our analog to the IETF RFC (Request for Comment). Although most closely associated with technical standards (e.g., the province of the Technology Stack WG ), a TSS may also be produced by the Governance Stack WG (for example to define requirements for discovery, identification, or machine-readability of governance frameworks). Any technically-oriented ToIP Foundation WG may produce a TSS. A TSS is distinguished from other deliverables because it can be the basis for: Implementations in source code . A key test of any open standard specification is whether it can have multiple independent interoperable implementations in executable software code\u2014in any choice of programming language. Interoperability testing . Conformance requirements in a specification can be used to create neutral, objective, machine-verifiable interoperability test suites. Certification . Interoperability testing can be the basis for official certification programs, whether offered by the ToIP Foundation, other Linux Foundation projects, or independent third party certification labs. Official standardization . Any specification produced under a JDF charter has the necessary intellectual property rights protections to be advanced to an official standards development organization (SDO\u2014also called a standards setting organization* or SSO). Examples include ISO (with whom the Linux Foundation JDF projects have a special relationship), IETF, W3C, OASIS, etc. For ToIP specifications, this is the specific role of a ToIP Standard Specification (TSS), as described below. Figure 2 illustrates this final point that a TSS produced under a Linux Foundation JDF project has a direct path to official standardization in a recognized SDO. Figure 2: TSS has a direct path to become official standards. There are three flavors of TSS depending on where the content originates: Internal : This type of TSS is developed entirely by a ToIP WG\u2014for example the Overlays Capture Architecture (OCA) spec from the Decentralized Semantics WG . External : This is a profile of an open standard specification from another SDO\u2014for example a profile of the W3C Decentralized Identifiers (DIDs) Core 1.0 spec. Hybrid : A combination of Internal and External. Layer Interoperability Specifications \u00b6 One of the responsibilities of the Governance and Technology Stack WGs is to publish specifications that address how the layers of the ToIP Stack SHOULD achieve interoperability. As depicted by Figure 3, a Layer Interoperability Spec is a type of specification that would be used by open-source implementations supporting each ToIP Layer. Figure 3: Layer Interoperability Specs are examples of a TSS. Glossaries \u00b6 In both technology and legal architecture, the definition of terms are a fundamental building block. One of the most important functions of the ToIP Foundation is to develop a shared conceptual framework for describing and understanding decentralized digital trust infrastructure\u2014and then turn that into a set of concrete glossaries of shared terms that meet the needs of specific communities and stakeholders. Glossaries are the explicit deliverables of our Concepts and Terminology Working Group , however all WGs and TFs are invited to contribute to this effort. Recommendations \u00b6 Any ToIP working body can produce a recommendation it advises ToIP implementers to follow. There are three specific types of recommendations that are particularly important for ToIP as shown in Figure 4: Figure 4: Three specific types of ToIP recommendations. ToIP Interoperability Profiles (TIPs) \u00b6 A TIP is a special type of recommendation that is incubated within the Technology Stack WG ). Intended as as evidence of a proven solution architecture, a TIP provides specific guidance to interested ToIP Layer 4 Ecosystem Projects. Analogous to a cooking recipe, a TIP suggests how to assemble an Ecosystem Project around a profile of use cases backed by technology that has been implemented and tested by a community of vendors. A TIP is designed to play a specific role in the evolution of the ToIP Technology Stack. Unlike a TSS, which represents a universally-accepted component of the stack, a TIP represents a profile of a specific set of components and protocols designed to achieve vertical interoperability \u2014- interoperability that works up and down all four layers of the ToIP technology stack even if it is not yet interoperable with other TIPs . A TIP is created by a specific community of stakeholders to meet their needs at a specific point in time. In short, a TIP provides a \u201cfull stack\u201d solution architecture that has demonstrated real adoption in the market. By \u201cfull stack\u201d, we mean that a TIP must define all the technical components needed to meet the architectural requirements of all four layers of the ToIP stack. As shown in Figure 5, some of those components will be TSS\u2014standards that already have gained Foundation-wide approval. Other components\u2014particularly those that address gaps in the stack can be feed back into the TSWG for further refinement of the ToIP stack. Figure 5: Conceptual diagram of how a TIP puts together standard TSS components and custom TIP components like Lego blocks in order to define a full stack solution. To be clear, different communities of stakeholders can produce different TIPs that are not yet interoperable with each other. This is acceptable as a step toward the longer-term goal of a fully interoperable ToIP stack . Having a relatively small number of TIPs co-evolve in the market, generating measurable market feedback about adoption, is an incremental standardization strategy that addresses the reality that convergence on a complete set of TSS for the ToIP stack will not happen in a single bound. Instead, with TIPs, stakeholders can deliberately harness the natural evolution of technology, standardization, and adoption to drive convergence in a series of incremental steps\u2014each of which can be proven out by actual market metrics. Given its unique purpose, a TIP is a very robust type of recommendation that may include a number of constituent components. Designed, refined, and supported by a community of stakeholders, a TIP can incorporate all these key factors in successful market adoption: Use cases : Specific examples of the market problems the TIP is designed to solve. Design principles : Guidelines for how market requirements should be translated into architecture and technology decisions. Features : Documentation that clearly communicates the design, architecture, features, and benefits of a TIP to the digital trust ecosystems targeted for adoption. Best practices : Guidance for implementers and recommendations\u2014particularly for interlock with the ToIP Governance Stack. Interoperability testing : Community-driven test suites and result certification. Vendor support : Proven implementations by vendors who can demonstrate the real-world interoperability of their solutions. Adoption case studies and metrics : Quantifiable evidence in the marketplace of real market impact Design Principles \u00b6 A second key type of recommendation is not itself a specification, but a set of principles that help guide the development of other ToIP deliverables. Design principles apply to all types of architecture, so they are highly relevant to both the governance and technical sides of the ToIP stack. They are a generalization of design patterns that originated in building architecture and have spread to software architecture and other fields. Design Principles will minimally be leveraged by TIPs. Best Practices \u00b6 Best practices are based on practical experience with implementing solutions and learning what does and does not work. They are relevant to every area of ToIP infrastructure, both within our Stack WGs (Governance and Technical) and our Foundry WGs (Utility and Ecosystem). Guides \u00b6 A guide describes how a particular set of stakeholders intend to use ToIP specifications, definitions, and recommendations to instantiate a new governance authority and/or governance framework for a trust community. There are two (2) flavors of guides: Governance Guide : Produced by the Governance Stack WG (GSWG), these work-products provide generalized domain guidance for how an ecosystem project may apply governance concepts to the creation of a specific governance framework. Implementation Guide : Produced by the Foundry Working Groups, these work-products provide generalized domain guidance for how an ecosystem project should define an execution plan (\"project playbook\") for the creation of a specific ecosystem or utility project. Figure 6: Guides are building blocks for project specific governance frameworks works and project playbooks. To use the analogy of building a house, a project playbook (or plan) might include the blueprints, cost estimates, and construction schedule\u2014everything an owner needs to be ready to build. The project playbook would be an instantiation of a guide based on the builders prior experience in building that specific style of house under similar conditions. IMPORTANT: The actual building of the house takes place outside the ToIP Foundation. In other words, the ToIP Foundation is not a governance authority and does not publish operational governance frameworks or project playbooks . Our job is to develop the specifications and guides necessary to help bootstrap the creation and maintenance of ecosystem and utility projects. White Papers \u00b6 A white paper is an informative document written for an audience who needs to be educated on a topic\u2014usually to support strategy, implementation decisions and offered sample case studies depicted the applicability of a solution. White papers are meant to be read and understood, not followed, instantiated, or implemented. All ToIP working bodies may publish white papers, and they can advance through the same approval process as any other ToIP deliverable (see below). An example would be education about the market needs that are driving development of a specific TIP and the roadmap for its continued evolution.","title":"Deliverables"},{"location":"process/work_products/#toip-deliverables","text":"The ToIP Foundation produces a wide range of deliverables that are organized under the five (5) categrories: Deliverable Type Designed to be: Specification Implemented (in code) Glossary Incorporated (in other documents) Recommendation Followed (in practice) Guides Executed (in operation) White Paper Understood (to support decisions) Table 1: The primary differences between the five types of deliverables.","title":"ToIP Deliverables"},{"location":"process/work_products/#deliverable-types","text":"","title":"Deliverable Types"},{"location":"process/work_products/#specifications","text":"The most common deliverable under a JDF charter is a specification . At the ToIP Foundation, a standards-track specification is called a TSS (ToIP Standard Specification). This acronym was chosen to be our analog to the IETF RFC (Request for Comment). Although most closely associated with technical standards (e.g., the province of the Technology Stack WG ), a TSS may also be produced by the Governance Stack WG (for example to define requirements for discovery, identification, or machine-readability of governance frameworks). Any technically-oriented ToIP Foundation WG may produce a TSS. A TSS is distinguished from other deliverables because it can be the basis for: Implementations in source code . A key test of any open standard specification is whether it can have multiple independent interoperable implementations in executable software code\u2014in any choice of programming language. Interoperability testing . Conformance requirements in a specification can be used to create neutral, objective, machine-verifiable interoperability test suites. Certification . Interoperability testing can be the basis for official certification programs, whether offered by the ToIP Foundation, other Linux Foundation projects, or independent third party certification labs. Official standardization . Any specification produced under a JDF charter has the necessary intellectual property rights protections to be advanced to an official standards development organization (SDO\u2014also called a standards setting organization* or SSO). Examples include ISO (with whom the Linux Foundation JDF projects have a special relationship), IETF, W3C, OASIS, etc. For ToIP specifications, this is the specific role of a ToIP Standard Specification (TSS), as described below. Figure 2 illustrates this final point that a TSS produced under a Linux Foundation JDF project has a direct path to official standardization in a recognized SDO. Figure 2: TSS has a direct path to become official standards. There are three flavors of TSS depending on where the content originates: Internal : This type of TSS is developed entirely by a ToIP WG\u2014for example the Overlays Capture Architecture (OCA) spec from the Decentralized Semantics WG . External : This is a profile of an open standard specification from another SDO\u2014for example a profile of the W3C Decentralized Identifiers (DIDs) Core 1.0 spec. Hybrid : A combination of Internal and External.","title":"Specifications"},{"location":"process/work_products/#layer-interoperability-specifications","text":"One of the responsibilities of the Governance and Technology Stack WGs is to publish specifications that address how the layers of the ToIP Stack SHOULD achieve interoperability. As depicted by Figure 3, a Layer Interoperability Spec is a type of specification that would be used by open-source implementations supporting each ToIP Layer. Figure 3: Layer Interoperability Specs are examples of a TSS.","title":"Layer Interoperability Specifications"},{"location":"process/work_products/#glossaries","text":"In both technology and legal architecture, the definition of terms are a fundamental building block. One of the most important functions of the ToIP Foundation is to develop a shared conceptual framework for describing and understanding decentralized digital trust infrastructure\u2014and then turn that into a set of concrete glossaries of shared terms that meet the needs of specific communities and stakeholders. Glossaries are the explicit deliverables of our Concepts and Terminology Working Group , however all WGs and TFs are invited to contribute to this effort.","title":"Glossaries"},{"location":"process/work_products/#recommendations","text":"Any ToIP working body can produce a recommendation it advises ToIP implementers to follow. There are three specific types of recommendations that are particularly important for ToIP as shown in Figure 4: Figure 4: Three specific types of ToIP recommendations.","title":"Recommendations"},{"location":"process/work_products/#toip-interoperability-profiles-tips","text":"A TIP is a special type of recommendation that is incubated within the Technology Stack WG ). Intended as as evidence of a proven solution architecture, a TIP provides specific guidance to interested ToIP Layer 4 Ecosystem Projects. Analogous to a cooking recipe, a TIP suggests how to assemble an Ecosystem Project around a profile of use cases backed by technology that has been implemented and tested by a community of vendors. A TIP is designed to play a specific role in the evolution of the ToIP Technology Stack. Unlike a TSS, which represents a universally-accepted component of the stack, a TIP represents a profile of a specific set of components and protocols designed to achieve vertical interoperability \u2014- interoperability that works up and down all four layers of the ToIP technology stack even if it is not yet interoperable with other TIPs . A TIP is created by a specific community of stakeholders to meet their needs at a specific point in time. In short, a TIP provides a \u201cfull stack\u201d solution architecture that has demonstrated real adoption in the market. By \u201cfull stack\u201d, we mean that a TIP must define all the technical components needed to meet the architectural requirements of all four layers of the ToIP stack. As shown in Figure 5, some of those components will be TSS\u2014standards that already have gained Foundation-wide approval. Other components\u2014particularly those that address gaps in the stack can be feed back into the TSWG for further refinement of the ToIP stack. Figure 5: Conceptual diagram of how a TIP puts together standard TSS components and custom TIP components like Lego blocks in order to define a full stack solution. To be clear, different communities of stakeholders can produce different TIPs that are not yet interoperable with each other. This is acceptable as a step toward the longer-term goal of a fully interoperable ToIP stack . Having a relatively small number of TIPs co-evolve in the market, generating measurable market feedback about adoption, is an incremental standardization strategy that addresses the reality that convergence on a complete set of TSS for the ToIP stack will not happen in a single bound. Instead, with TIPs, stakeholders can deliberately harness the natural evolution of technology, standardization, and adoption to drive convergence in a series of incremental steps\u2014each of which can be proven out by actual market metrics. Given its unique purpose, a TIP is a very robust type of recommendation that may include a number of constituent components. Designed, refined, and supported by a community of stakeholders, a TIP can incorporate all these key factors in successful market adoption: Use cases : Specific examples of the market problems the TIP is designed to solve. Design principles : Guidelines for how market requirements should be translated into architecture and technology decisions. Features : Documentation that clearly communicates the design, architecture, features, and benefits of a TIP to the digital trust ecosystems targeted for adoption. Best practices : Guidance for implementers and recommendations\u2014particularly for interlock with the ToIP Governance Stack. Interoperability testing : Community-driven test suites and result certification. Vendor support : Proven implementations by vendors who can demonstrate the real-world interoperability of their solutions. Adoption case studies and metrics : Quantifiable evidence in the marketplace of real market impact","title":"ToIP Interoperability Profiles (TIPs)"},{"location":"process/work_products/#design-principles","text":"A second key type of recommendation is not itself a specification, but a set of principles that help guide the development of other ToIP deliverables. Design principles apply to all types of architecture, so they are highly relevant to both the governance and technical sides of the ToIP stack. They are a generalization of design patterns that originated in building architecture and have spread to software architecture and other fields. Design Principles will minimally be leveraged by TIPs.","title":"Design Principles"},{"location":"process/work_products/#best-practices","text":"Best practices are based on practical experience with implementing solutions and learning what does and does not work. They are relevant to every area of ToIP infrastructure, both within our Stack WGs (Governance and Technical) and our Foundry WGs (Utility and Ecosystem).","title":"Best Practices"},{"location":"process/work_products/#guides","text":"A guide describes how a particular set of stakeholders intend to use ToIP specifications, definitions, and recommendations to instantiate a new governance authority and/or governance framework for a trust community. There are two (2) flavors of guides: Governance Guide : Produced by the Governance Stack WG (GSWG), these work-products provide generalized domain guidance for how an ecosystem project may apply governance concepts to the creation of a specific governance framework. Implementation Guide : Produced by the Foundry Working Groups, these work-products provide generalized domain guidance for how an ecosystem project should define an execution plan (\"project playbook\") for the creation of a specific ecosystem or utility project. Figure 6: Guides are building blocks for project specific governance frameworks works and project playbooks. To use the analogy of building a house, a project playbook (or plan) might include the blueprints, cost estimates, and construction schedule\u2014everything an owner needs to be ready to build. The project playbook would be an instantiation of a guide based on the builders prior experience in building that specific style of house under similar conditions. IMPORTANT: The actual building of the house takes place outside the ToIP Foundation. In other words, the ToIP Foundation is not a governance authority and does not publish operational governance frameworks or project playbooks . Our job is to develop the specifications and guides necessary to help bootstrap the creation and maintenance of ecosystem and utility projects.","title":"Guides"},{"location":"process/work_products/#white-papers","text":"A white paper is an informative document written for an audience who needs to be educated on a topic\u2014usually to support strategy, implementation decisions and offered sample case studies depicted the applicability of a solution. White papers are meant to be read and understood, not followed, instantiated, or implemented. All ToIP working bodies may publish white papers, and they can advance through the same approval process as any other ToIP deliverable (see below). An example would be education about the market needs that are driving development of a specific TIP and the roadmap for its continued evolution.","title":"White Papers"},{"location":"results/2021Q1/","text":"2021 Q1 Priorities \u00b6 The ToIP Foundation has targeted the following deliverables for submission to the Steering Committee for graduation to Accepted status by the end of 2021 Q1. Minimally, each scheduled deliverable MUST be Approved by the sponsoring WG. Deliverable WG Task Force Lead Status TSS0001: Governance Stack GSWG TBD TSS0002: Technology Stack TSWG TBD DP0006: Technology Stack TSWG TBD DP0007: Governance Stack GSWG TBD WP0010: ToIP Foundation Whitepaper (v2) GSWG/TSWG TBD","title":"Current Priorities"},{"location":"results/2021Q1/#2021-q1-priorities","text":"The ToIP Foundation has targeted the following deliverables for submission to the Steering Committee for graduation to Accepted status by the end of 2021 Q1. Minimally, each scheduled deliverable MUST be Approved by the sponsoring WG. Deliverable WG Task Force Lead Status TSS0001: Governance Stack GSWG TBD TSS0002: Technology Stack TSWG TBD DP0006: Technology Stack TSWG TBD DP0007: Governance Stack GSWG TBD WP0010: ToIP Foundation Whitepaper (v2) GSWG/TSWG TBD","title":"2021 Q1 Priorities"},{"location":"results/2021Q2/","text":"2021 Q2 Priorities \u00b6 The ToIP Foundation has targeted the following deliverables for submission to the Steering Committee for graduation to Accepted status by the end of 2021 Q1. Minimally, each scheduled deliverable MUST be Approved by the sponsoring WG. Deliverable WG Task Force Lead Status TSS0011: Layer 1 Interop Spec TSWG TBD TSS0012: Layer 2 Interop Spec TSWG TBD TSS0013: Layer 3 Interop Spec TSWG TBD DP0003: Laws of Identity TSWG TBD DP0004: Privacy by Design TSWG TBD DP0005: Decentralization by Design TSWG TBD DP0030: Self-sovereign Identity (SSI) TSWG TBD BP0014: Utility Evaluation Framework GSWG TBD BP0016: Determining Utility Affordability GSWG TBD BP0017: Assessing Utility Alignment GSWG TBD TIP0028: Saturn V TSWG TBD WP0020: ToIP Digital Trust Marketplace FAQ EFWG TBD DP0031: Principles of SSI GSWG Drummond Reed, Sankarshan Mukhopadhyay","title":"Next Priorities"},{"location":"results/2021Q2/#2021-q2-priorities","text":"The ToIP Foundation has targeted the following deliverables for submission to the Steering Committee for graduation to Accepted status by the end of 2021 Q1. Minimally, each scheduled deliverable MUST be Approved by the sponsoring WG. Deliverable WG Task Force Lead Status TSS0011: Layer 1 Interop Spec TSWG TBD TSS0012: Layer 2 Interop Spec TSWG TBD TSS0013: Layer 3 Interop Spec TSWG TBD DP0003: Laws of Identity TSWG TBD DP0004: Privacy by Design TSWG TBD DP0005: Decentralization by Design TSWG TBD DP0030: Self-sovereign Identity (SSI) TSWG TBD BP0014: Utility Evaluation Framework GSWG TBD BP0016: Determining Utility Affordability GSWG TBD BP0017: Assessing Utility Alignment GSWG TBD TIP0028: Saturn V TSWG TBD WP0020: ToIP Digital Trust Marketplace FAQ EFWG TBD DP0031: Principles of SSI GSWG Drummond Reed, Sankarshan Mukhopadhyay","title":"2021 Q2 Priorities"},{"location":"results/2021_roadmap/","text":"2021 Roadmap \u00b6 The following deliverables and their dependencies frame the workload for 2021. Q1 Plan \u00b6 Deliverable Target Milestone Dependencies TSS0001: Governance Stack 2021-Q1 None TSS0002: Technology Stack 2022-Q1 Key Technology Specs DP0005: Governance Stack 2021-Q1 Foundational Design Principles DP0006: Technology Stack 2021-Q1 Foundational Design Principles WP0010: ToIP Foundation Whitepaper (v2) 2021-Q1 None Q1 Stretch Goals \u00b6 Deliverable Target Milestone Dependencies WP0020: ToIP Digital Trust Marketplace FAQ 2021-Q2 None Q2 Plan \u00b6 Deliverable Target Milestone Dependencies WP0020: ToIP Digital Trust Marketplace FAQ 2021-Q2 None TIP0028: Saturn V (Draft) 2021-Q2 Foundational Design Principles, Early Best Practice Research Dependencies \u00b6 Foundational Design Principles \u00b6 The following deliverables are scheduled for 2021-Q2 availability. DP0003: Laws of Identity DP0004: Privacy by Design DP0005: Decentralization by Design DP0030: Self-sovereign Identity (SSI) Early Best Practice Research \u00b6 The following deliverables are scheduled for 2021-Q2 availability. BP0014: Utility Evaluation Framework BP0015: Assessing Utility Sustainability BP0016: Determining Utility Affordability BP0017: Assessing Utility Alignment Key Technology Specs \u00b6 The following deliverables are scheduled for 2021-Q2 availability. TSS0011: Layer 1 Interop Spec TSS0012: Layer 2 Interop Spec TSS0013: Layer 3 Interop Spec","title":"Roadmap"},{"location":"results/2021_roadmap/#2021-roadmap","text":"The following deliverables and their dependencies frame the workload for 2021.","title":"2021 Roadmap"},{"location":"results/2021_roadmap/#q1-plan","text":"Deliverable Target Milestone Dependencies TSS0001: Governance Stack 2021-Q1 None TSS0002: Technology Stack 2022-Q1 Key Technology Specs DP0005: Governance Stack 2021-Q1 Foundational Design Principles DP0006: Technology Stack 2021-Q1 Foundational Design Principles WP0010: ToIP Foundation Whitepaper (v2) 2021-Q1 None","title":"Q1 Plan"},{"location":"results/2021_roadmap/#q1-stretch-goals","text":"Deliverable Target Milestone Dependencies WP0020: ToIP Digital Trust Marketplace FAQ 2021-Q2 None","title":"Q1 Stretch Goals"},{"location":"results/2021_roadmap/#q2-plan","text":"Deliverable Target Milestone Dependencies WP0020: ToIP Digital Trust Marketplace FAQ 2021-Q2 None TIP0028: Saturn V (Draft) 2021-Q2 Foundational Design Principles, Early Best Practice Research","title":"Q2 Plan"},{"location":"results/2021_roadmap/#dependencies","text":"","title":"Dependencies"},{"location":"results/2021_roadmap/#foundational-design-principles","text":"The following deliverables are scheduled for 2021-Q2 availability. DP0003: Laws of Identity DP0004: Privacy by Design DP0005: Decentralization by Design DP0030: Self-sovereign Identity (SSI)","title":"Foundational Design Principles"},{"location":"results/2021_roadmap/#early-best-practice-research","text":"The following deliverables are scheduled for 2021-Q2 availability. BP0014: Utility Evaluation Framework BP0015: Assessing Utility Sustainability BP0016: Determining Utility Affordability BP0017: Assessing Utility Alignment","title":"Early Best Practice Research"},{"location":"results/2021_roadmap/#key-technology-specs","text":"The following deliverables are scheduled for 2021-Q2 availability. TSS0011: Layer 1 Interop Spec TSS0012: Layer 2 Interop Spec TSS0013: Layer 3 Interop Spec","title":"Key Technology Specs"},{"location":"results/accepted/","text":"Specifications \u00b6 Name Target SDO Links Glossaries \u00b6 Name Links Recommendations \u00b6 Name Type Links Implementation Guides \u00b6 Name Type Links White Papers \u00b6 Name Links WP0035: Decentralized Resource Identifiers","title":"Accepted"},{"location":"results/accepted/#specifications","text":"Name Target SDO Links","title":"Specifications"},{"location":"results/accepted/#glossaries","text":"Name Links","title":"Glossaries"},{"location":"results/accepted/#recommendations","text":"Name Type Links","title":"Recommendations"},{"location":"results/accepted/#implementation-guides","text":"Name Type Links","title":"Implementation Guides"},{"location":"results/accepted/#white-papers","text":"Name Links WP0035: Decentralized Resource Identifiers","title":"White Papers"},{"location":"results/approved/","text":"Specifications \u00b6 Name Target SDO Links Glossaries \u00b6 Name Links Recommendations \u00b6 Name Type Links Implementation Guides \u00b6 Name Type Links White Papers \u00b6 Name Links","title":"Approved"},{"location":"results/approved/#specifications","text":"Name Target SDO Links","title":"Specifications"},{"location":"results/approved/#glossaries","text":"Name Links","title":"Glossaries"},{"location":"results/approved/#recommendations","text":"Name Type Links","title":"Recommendations"},{"location":"results/approved/#implementation-guides","text":"Name Type Links","title":"Implementation Guides"},{"location":"results/approved/#white-papers","text":"Name Links","title":"White Papers"},{"location":"results/proposed/","text":"Specifications \u00b6 Status Name Description WG Target SDO Links TSS0001: Goverance Stack ToIP Governance Architecture GSWG TBD TSS0002: Technology Stack ToIP Technical Architecture TSWG TBD TSS0011: Layer 1 Interop Spec Technology Stack Layer 1 Interoperability Specification TSWG TBD TSS0012: Layer 2 Interop Spec Technology Stack Layer 2 Interoperability Specification TSWG TBD TSS0013: Layer 3 Interop Spec Technology Stack Layer 3 Interoperability Specification TSWG TBD Glossaries \u00b6 Status Name Links GL0000: UFWG Glossary Recommendations \u00b6 Status Name Description WG Links DP0003: Laws of Identity Laws of Identity TSWG DP0004: Privacy by Design Privacy by Design TSWG DP0005: Decentralization by Design Decentralization by Design TSWG DP0006: Technology Stack Technology Stack Design Principles TSWG DP0007: Governance Stack Governance Stack Design Principles GSWG BP0014: Utility Evaluation Framework An evaluation framework for selecting public identity utilities. UFWG BP0015: Assessing Utility Sustainability Best practices for assessing the sustainability of a public identity utility. UFWG BP0016: Determining Utility Affordability Best practices to consider when evaluating the affordability of a public identity utility. UFWG BP0017: Assessing Utility Alignment Best practices for evaluating the alignment of a specific public identity utility against ecosystems goals. UFWG TIP0028: Saturn V ToIP Interoperability Profile for the Saturn-V solution architecture. TSWG DP0031: Principles of SSI Principles of SSI GSWG/TSWG DP0034: ToIP Stack Design Principles ToIP Stack Design Principles GSWG/TSWG Guides \u00b6 Status Name Description WG Links White Papers \u00b6 Status Name Description WG Links WP0010: ToIP Foundation Whitepaper Update of Foundation White Paper GSWG / TSWG WP0020: ToIP Digital Trust Marketplace FAQ ToIP answers to frequently asked questions pertinent to successful ecosystems within a digital trust marketplace. EFWG WP0035: Decentralized Resource Identifiers A new ecosystem of decentralized research identifiers is proposed EFWG","title":"Proposed"},{"location":"results/proposed/#specifications","text":"Status Name Description WG Target SDO Links TSS0001: Goverance Stack ToIP Governance Architecture GSWG TBD TSS0002: Technology Stack ToIP Technical Architecture TSWG TBD TSS0011: Layer 1 Interop Spec Technology Stack Layer 1 Interoperability Specification TSWG TBD TSS0012: Layer 2 Interop Spec Technology Stack Layer 2 Interoperability Specification TSWG TBD TSS0013: Layer 3 Interop Spec Technology Stack Layer 3 Interoperability Specification TSWG TBD","title":"Specifications"},{"location":"results/proposed/#glossaries","text":"Status Name Links GL0000: UFWG Glossary","title":"Glossaries"},{"location":"results/proposed/#recommendations","text":"Status Name Description WG Links DP0003: Laws of Identity Laws of Identity TSWG DP0004: Privacy by Design Privacy by Design TSWG DP0005: Decentralization by Design Decentralization by Design TSWG DP0006: Technology Stack Technology Stack Design Principles TSWG DP0007: Governance Stack Governance Stack Design Principles GSWG BP0014: Utility Evaluation Framework An evaluation framework for selecting public identity utilities. UFWG BP0015: Assessing Utility Sustainability Best practices for assessing the sustainability of a public identity utility. UFWG BP0016: Determining Utility Affordability Best practices to consider when evaluating the affordability of a public identity utility. UFWG BP0017: Assessing Utility Alignment Best practices for evaluating the alignment of a specific public identity utility against ecosystems goals. UFWG TIP0028: Saturn V ToIP Interoperability Profile for the Saturn-V solution architecture. TSWG DP0031: Principles of SSI Principles of SSI GSWG/TSWG DP0034: ToIP Stack Design Principles ToIP Stack Design Principles GSWG/TSWG","title":"Recommendations"},{"location":"results/proposed/#guides","text":"Status Name Description WG Links","title":"Guides"},{"location":"results/proposed/#white-papers","text":"Status Name Description WG Links WP0010: ToIP Foundation Whitepaper Update of Foundation White Paper GSWG / TSWG WP0020: ToIP Digital Trust Marketplace FAQ ToIP answers to frequently asked questions pertinent to successful ecosystems within a digital trust marketplace. EFWG WP0035: Decentralized Resource Identifiers A new ecosystem of decentralized research identifiers is proposed EFWG","title":"White Papers"},{"location":"results/sdo/","text":"Specifications \u00b6 Name SDO Links","title":"Standard Development Organizations"},{"location":"results/sdo/#specifications","text":"Name SDO Links","title":"Specifications"}]}